// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/app"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appcontrol"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approle"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approleuser"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuser"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appusercontrol"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuserextra"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appusersecret"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuserthirdparty"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/banapp"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/banappuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 11)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: app.FieldID,
			},
		},
		Type: "App",
		Fields: map[string]*sqlgraph.FieldSpec{
			app.FieldCreatedAt:   {Type: field.TypeUint32, Column: app.FieldCreatedAt},
			app.FieldUpdatedAt:   {Type: field.TypeUint32, Column: app.FieldUpdatedAt},
			app.FieldDeletedAt:   {Type: field.TypeUint32, Column: app.FieldDeletedAt},
			app.FieldCreatedBy:   {Type: field.TypeUUID, Column: app.FieldCreatedBy},
			app.FieldName:        {Type: field.TypeString, Column: app.FieldName},
			app.FieldLogo:        {Type: field.TypeString, Column: app.FieldLogo},
			app.FieldDescription: {Type: field.TypeString, Column: app.FieldDescription},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appcontrol.Table,
			Columns: appcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcontrol.FieldID,
			},
		},
		Type: "AppControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			appcontrol.FieldCreatedAt:           {Type: field.TypeUint32, Column: appcontrol.FieldCreatedAt},
			appcontrol.FieldUpdatedAt:           {Type: field.TypeUint32, Column: appcontrol.FieldUpdatedAt},
			appcontrol.FieldDeletedAt:           {Type: field.TypeUint32, Column: appcontrol.FieldDeletedAt},
			appcontrol.FieldAppID:               {Type: field.TypeUUID, Column: appcontrol.FieldAppID},
			appcontrol.FieldSignupMethods:       {Type: field.TypeJSON, Column: appcontrol.FieldSignupMethods},
			appcontrol.FieldExternSigninMethods: {Type: field.TypeJSON, Column: appcontrol.FieldExternSigninMethods},
			appcontrol.FieldRecaptchaMethod:     {Type: field.TypeString, Column: appcontrol.FieldRecaptchaMethod},
			appcontrol.FieldKycEnable:           {Type: field.TypeBool, Column: appcontrol.FieldKycEnable},
			appcontrol.FieldSigninVerifyEnable:  {Type: field.TypeBool, Column: appcontrol.FieldSigninVerifyEnable},
			appcontrol.FieldInvitationCodeMust:  {Type: field.TypeBool, Column: appcontrol.FieldInvitationCodeMust},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   approle.Table,
			Columns: approle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approle.FieldID,
			},
		},
		Type: "AppRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			approle.FieldCreatedAt:   {Type: field.TypeUint32, Column: approle.FieldCreatedAt},
			approle.FieldUpdatedAt:   {Type: field.TypeUint32, Column: approle.FieldUpdatedAt},
			approle.FieldDeletedAt:   {Type: field.TypeUint32, Column: approle.FieldDeletedAt},
			approle.FieldCreatedBy:   {Type: field.TypeUUID, Column: approle.FieldCreatedBy},
			approle.FieldRole:        {Type: field.TypeString, Column: approle.FieldRole},
			approle.FieldDescription: {Type: field.TypeString, Column: approle.FieldDescription},
			approle.FieldAppID:       {Type: field.TypeUUID, Column: approle.FieldAppID},
			approle.FieldDefault:     {Type: field.TypeBool, Column: approle.FieldDefault},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   approleuser.Table,
			Columns: approleuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approleuser.FieldID,
			},
		},
		Type: "AppRoleUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			approleuser.FieldCreatedAt: {Type: field.TypeUint32, Column: approleuser.FieldCreatedAt},
			approleuser.FieldUpdatedAt: {Type: field.TypeUint32, Column: approleuser.FieldUpdatedAt},
			approleuser.FieldDeletedAt: {Type: field.TypeUint32, Column: approleuser.FieldDeletedAt},
			approleuser.FieldAppID:     {Type: field.TypeUUID, Column: approleuser.FieldAppID},
			approleuser.FieldRoleID:    {Type: field.TypeUUID, Column: approleuser.FieldRoleID},
			approleuser.FieldUserID:    {Type: field.TypeUUID, Column: approleuser.FieldUserID},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appuser.Table,
			Columns: appuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuser.FieldID,
			},
		},
		Type: "AppUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			appuser.FieldCreatedAt:     {Type: field.TypeUint32, Column: appuser.FieldCreatedAt},
			appuser.FieldUpdatedAt:     {Type: field.TypeUint32, Column: appuser.FieldUpdatedAt},
			appuser.FieldDeletedAt:     {Type: field.TypeUint32, Column: appuser.FieldDeletedAt},
			appuser.FieldAppID:         {Type: field.TypeUUID, Column: appuser.FieldAppID},
			appuser.FieldEmailAddress:  {Type: field.TypeString, Column: appuser.FieldEmailAddress},
			appuser.FieldPhoneNo:       {Type: field.TypeString, Column: appuser.FieldPhoneNo},
			appuser.FieldImportFromApp: {Type: field.TypeUUID, Column: appuser.FieldImportFromApp},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appusercontrol.Table,
			Columns: appusercontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appusercontrol.FieldID,
			},
		},
		Type: "AppUserControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			appusercontrol.FieldCreatedAt:                          {Type: field.TypeUint32, Column: appusercontrol.FieldCreatedAt},
			appusercontrol.FieldUpdatedAt:                          {Type: field.TypeUint32, Column: appusercontrol.FieldUpdatedAt},
			appusercontrol.FieldDeletedAt:                          {Type: field.TypeUint32, Column: appusercontrol.FieldDeletedAt},
			appusercontrol.FieldAppID:                              {Type: field.TypeUUID, Column: appusercontrol.FieldAppID},
			appusercontrol.FieldUserID:                             {Type: field.TypeUUID, Column: appusercontrol.FieldUserID},
			appusercontrol.FieldSigninVerifyByGoogleAuthentication: {Type: field.TypeBool, Column: appusercontrol.FieldSigninVerifyByGoogleAuthentication},
			appusercontrol.FieldGoogleAuthenticationVerified:       {Type: field.TypeBool, Column: appusercontrol.FieldGoogleAuthenticationVerified},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appuserextra.Table,
			Columns: appuserextra.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserextra.FieldID,
			},
		},
		Type: "AppUserExtra",
		Fields: map[string]*sqlgraph.FieldSpec{
			appuserextra.FieldCreatedAt:     {Type: field.TypeUint32, Column: appuserextra.FieldCreatedAt},
			appuserextra.FieldUpdatedAt:     {Type: field.TypeUint32, Column: appuserextra.FieldUpdatedAt},
			appuserextra.FieldDeletedAt:     {Type: field.TypeUint32, Column: appuserextra.FieldDeletedAt},
			appuserextra.FieldAppID:         {Type: field.TypeUUID, Column: appuserextra.FieldAppID},
			appuserextra.FieldUserID:        {Type: field.TypeUUID, Column: appuserextra.FieldUserID},
			appuserextra.FieldUsername:      {Type: field.TypeString, Column: appuserextra.FieldUsername},
			appuserextra.FieldFirstName:     {Type: field.TypeString, Column: appuserextra.FieldFirstName},
			appuserextra.FieldLastName:      {Type: field.TypeString, Column: appuserextra.FieldLastName},
			appuserextra.FieldAddressFields: {Type: field.TypeJSON, Column: appuserextra.FieldAddressFields},
			appuserextra.FieldGender:        {Type: field.TypeString, Column: appuserextra.FieldGender},
			appuserextra.FieldPostalCode:    {Type: field.TypeString, Column: appuserextra.FieldPostalCode},
			appuserextra.FieldAge:           {Type: field.TypeUint32, Column: appuserextra.FieldAge},
			appuserextra.FieldBirthday:      {Type: field.TypeUint32, Column: appuserextra.FieldBirthday},
			appuserextra.FieldAvatar:        {Type: field.TypeString, Column: appuserextra.FieldAvatar},
			appuserextra.FieldOrganization:  {Type: field.TypeString, Column: appuserextra.FieldOrganization},
			appuserextra.FieldIDNumber:      {Type: field.TypeString, Column: appuserextra.FieldIDNumber},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appusersecret.Table,
			Columns: appusersecret.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appusersecret.FieldID,
			},
		},
		Type: "AppUserSecret",
		Fields: map[string]*sqlgraph.FieldSpec{
			appusersecret.FieldCreatedAt:    {Type: field.TypeUint32, Column: appusersecret.FieldCreatedAt},
			appusersecret.FieldUpdatedAt:    {Type: field.TypeUint32, Column: appusersecret.FieldUpdatedAt},
			appusersecret.FieldDeletedAt:    {Type: field.TypeUint32, Column: appusersecret.FieldDeletedAt},
			appusersecret.FieldAppID:        {Type: field.TypeUUID, Column: appusersecret.FieldAppID},
			appusersecret.FieldUserID:       {Type: field.TypeUUID, Column: appusersecret.FieldUserID},
			appusersecret.FieldPasswordHash: {Type: field.TypeString, Column: appusersecret.FieldPasswordHash},
			appusersecret.FieldSalt:         {Type: field.TypeString, Column: appusersecret.FieldSalt},
			appusersecret.FieldGoogleSecret: {Type: field.TypeString, Column: appusersecret.FieldGoogleSecret},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appuserthirdparty.Table,
			Columns: appuserthirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserthirdparty.FieldID,
			},
		},
		Type: "AppUserThirdParty",
		Fields: map[string]*sqlgraph.FieldSpec{
			appuserthirdparty.FieldCreatedAt:            {Type: field.TypeUint32, Column: appuserthirdparty.FieldCreatedAt},
			appuserthirdparty.FieldUpdatedAt:            {Type: field.TypeUint32, Column: appuserthirdparty.FieldUpdatedAt},
			appuserthirdparty.FieldDeletedAt:            {Type: field.TypeUint32, Column: appuserthirdparty.FieldDeletedAt},
			appuserthirdparty.FieldAppID:                {Type: field.TypeUUID, Column: appuserthirdparty.FieldAppID},
			appuserthirdparty.FieldUserID:               {Type: field.TypeUUID, Column: appuserthirdparty.FieldUserID},
			appuserthirdparty.FieldThirdPartyUserID:     {Type: field.TypeString, Column: appuserthirdparty.FieldThirdPartyUserID},
			appuserthirdparty.FieldThirdPartyID:         {Type: field.TypeString, Column: appuserthirdparty.FieldThirdPartyID},
			appuserthirdparty.FieldThirdPartyUsername:   {Type: field.TypeString, Column: appuserthirdparty.FieldThirdPartyUsername},
			appuserthirdparty.FieldThirdPartyUserAvatar: {Type: field.TypeString, Column: appuserthirdparty.FieldThirdPartyUserAvatar},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   banapp.Table,
			Columns: banapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: banapp.FieldID,
			},
		},
		Type: "BanApp",
		Fields: map[string]*sqlgraph.FieldSpec{
			banapp.FieldCreatedAt: {Type: field.TypeUint32, Column: banapp.FieldCreatedAt},
			banapp.FieldUpdatedAt: {Type: field.TypeUint32, Column: banapp.FieldUpdatedAt},
			banapp.FieldDeletedAt: {Type: field.TypeUint32, Column: banapp.FieldDeletedAt},
			banapp.FieldAppID:     {Type: field.TypeUUID, Column: banapp.FieldAppID},
			banapp.FieldMessage:   {Type: field.TypeString, Column: banapp.FieldMessage},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   banappuser.Table,
			Columns: banappuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: banappuser.FieldID,
			},
		},
		Type: "BanAppUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			banappuser.FieldCreatedAt: {Type: field.TypeUint32, Column: banappuser.FieldCreatedAt},
			banappuser.FieldUpdatedAt: {Type: field.TypeUint32, Column: banappuser.FieldUpdatedAt},
			banappuser.FieldDeletedAt: {Type: field.TypeUint32, Column: banappuser.FieldDeletedAt},
			banappuser.FieldAppID:     {Type: field.TypeUUID, Column: banappuser.FieldAppID},
			banappuser.FieldUserID:    {Type: field.TypeUUID, Column: banappuser.FieldUserID},
			banappuser.FieldMessage:   {Type: field.TypeString, Column: banappuser.FieldMessage},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AppQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppQuery builder.
func (aq *AppQuery) Filter() *AppFilter {
	return &AppFilter{aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppMutation builder.
func (m *AppMutation) Filter() *AppFilter {
	return &AppFilter{m}
}

// AppFilter provides a generic filtering capability at runtime for AppQuery.
type AppFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(app.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(app.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(app.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(app.FieldDeletedAt))
}

// WhereCreatedBy applies the entql [16]byte predicate on the created_by field.
func (f *AppFilter) WhereCreatedBy(p entql.ValueP) {
	f.Where(p.Field(app.FieldCreatedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *AppFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(app.FieldName))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *AppFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(app.FieldLogo))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AppFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(app.FieldDescription))
}

// addPredicate implements the predicateAdder interface.
func (acq *AppControlQuery) addPredicate(pred func(s *sql.Selector)) {
	acq.predicates = append(acq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppControlQuery builder.
func (acq *AppControlQuery) Filter() *AppControlFilter {
	return &AppControlFilter{acq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppControlMutation builder.
func (m *AppControlMutation) Filter() *AppControlFilter {
	return &AppControlFilter{m}
}

// AppControlFilter provides a generic filtering capability at runtime for AppControlQuery.
type AppControlFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appcontrol.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppControlFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppControlFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appcontrol.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppControlFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appcontrol.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppControlFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appcontrol.FieldAppID))
}

// WhereSignupMethods applies the entql json.RawMessage predicate on the signup_methods field.
func (f *AppControlFilter) WhereSignupMethods(p entql.BytesP) {
	f.Where(p.Field(appcontrol.FieldSignupMethods))
}

// WhereExternSigninMethods applies the entql json.RawMessage predicate on the extern_signin_methods field.
func (f *AppControlFilter) WhereExternSigninMethods(p entql.BytesP) {
	f.Where(p.Field(appcontrol.FieldExternSigninMethods))
}

// WhereRecaptchaMethod applies the entql string predicate on the recaptcha_method field.
func (f *AppControlFilter) WhereRecaptchaMethod(p entql.StringP) {
	f.Where(p.Field(appcontrol.FieldRecaptchaMethod))
}

// WhereKycEnable applies the entql bool predicate on the kyc_enable field.
func (f *AppControlFilter) WhereKycEnable(p entql.BoolP) {
	f.Where(p.Field(appcontrol.FieldKycEnable))
}

// WhereSigninVerifyEnable applies the entql bool predicate on the signin_verify_enable field.
func (f *AppControlFilter) WhereSigninVerifyEnable(p entql.BoolP) {
	f.Where(p.Field(appcontrol.FieldSigninVerifyEnable))
}

// WhereInvitationCodeMust applies the entql bool predicate on the invitation_code_must field.
func (f *AppControlFilter) WhereInvitationCodeMust(p entql.BoolP) {
	f.Where(p.Field(appcontrol.FieldInvitationCodeMust))
}

// addPredicate implements the predicateAdder interface.
func (arq *AppRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	arq.predicates = append(arq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppRoleQuery builder.
func (arq *AppRoleQuery) Filter() *AppRoleFilter {
	return &AppRoleFilter{arq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppRoleMutation builder.
func (m *AppRoleMutation) Filter() *AppRoleFilter {
	return &AppRoleFilter{m}
}

// AppRoleFilter provides a generic filtering capability at runtime for AppRoleQuery.
type AppRoleFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppRoleFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(approle.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppRoleFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(approle.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppRoleFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(approle.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppRoleFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(approle.FieldDeletedAt))
}

// WhereCreatedBy applies the entql [16]byte predicate on the created_by field.
func (f *AppRoleFilter) WhereCreatedBy(p entql.ValueP) {
	f.Where(p.Field(approle.FieldCreatedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *AppRoleFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(approle.FieldRole))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AppRoleFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(approle.FieldDescription))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppRoleFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(approle.FieldAppID))
}

// WhereDefault applies the entql bool predicate on the default field.
func (f *AppRoleFilter) WhereDefault(p entql.BoolP) {
	f.Where(p.Field(approle.FieldDefault))
}

// addPredicate implements the predicateAdder interface.
func (aruq *AppRoleUserQuery) addPredicate(pred func(s *sql.Selector)) {
	aruq.predicates = append(aruq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppRoleUserQuery builder.
func (aruq *AppRoleUserQuery) Filter() *AppRoleUserFilter {
	return &AppRoleUserFilter{aruq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppRoleUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppRoleUserMutation builder.
func (m *AppRoleUserMutation) Filter() *AppRoleUserFilter {
	return &AppRoleUserFilter{m}
}

// AppRoleUserFilter provides a generic filtering capability at runtime for AppRoleUserQuery.
type AppRoleUserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppRoleUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppRoleUserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(approleuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppRoleUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(approleuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppRoleUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(approleuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppRoleUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(approleuser.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppRoleUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(approleuser.FieldAppID))
}

// WhereRoleID applies the entql [16]byte predicate on the role_id field.
func (f *AppRoleUserFilter) WhereRoleID(p entql.ValueP) {
	f.Where(p.Field(approleuser.FieldRoleID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppRoleUserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(approleuser.FieldUserID))
}

// addPredicate implements the predicateAdder interface.
func (auq *AppUserQuery) addPredicate(pred func(s *sql.Selector)) {
	auq.predicates = append(auq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserQuery builder.
func (auq *AppUserQuery) Filter() *AppUserFilter {
	return &AppUserFilter{auq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserMutation builder.
func (m *AppUserMutation) Filter() *AppUserFilter {
	return &AppUserFilter{m}
}

// AppUserFilter provides a generic filtering capability at runtime for AppUserQuery.
type AppUserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppUserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appuser.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appuser.FieldAppID))
}

// WhereEmailAddress applies the entql string predicate on the email_address field.
func (f *AppUserFilter) WhereEmailAddress(p entql.StringP) {
	f.Where(p.Field(appuser.FieldEmailAddress))
}

// WherePhoneNo applies the entql string predicate on the phone_no field.
func (f *AppUserFilter) WherePhoneNo(p entql.StringP) {
	f.Where(p.Field(appuser.FieldPhoneNo))
}

// WhereImportFromApp applies the entql [16]byte predicate on the import_from_app field.
func (f *AppUserFilter) WhereImportFromApp(p entql.ValueP) {
	f.Where(p.Field(appuser.FieldImportFromApp))
}

// addPredicate implements the predicateAdder interface.
func (aucq *AppUserControlQuery) addPredicate(pred func(s *sql.Selector)) {
	aucq.predicates = append(aucq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserControlQuery builder.
func (aucq *AppUserControlQuery) Filter() *AppUserControlFilter {
	return &AppUserControlFilter{aucq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserControlMutation builder.
func (m *AppUserControlMutation) Filter() *AppUserControlFilter {
	return &AppUserControlFilter{m}
}

// AppUserControlFilter provides a generic filtering capability at runtime for AppUserControlQuery.
type AppUserControlFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppUserControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppUserControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appusercontrol.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserControlFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appusercontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserControlFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appusercontrol.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserControlFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appusercontrol.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserControlFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appusercontrol.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppUserControlFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(appusercontrol.FieldUserID))
}

// WhereSigninVerifyByGoogleAuthentication applies the entql bool predicate on the signin_verify_by_google_authentication field.
func (f *AppUserControlFilter) WhereSigninVerifyByGoogleAuthentication(p entql.BoolP) {
	f.Where(p.Field(appusercontrol.FieldSigninVerifyByGoogleAuthentication))
}

// WhereGoogleAuthenticationVerified applies the entql bool predicate on the google_authentication_verified field.
func (f *AppUserControlFilter) WhereGoogleAuthenticationVerified(p entql.BoolP) {
	f.Where(p.Field(appusercontrol.FieldGoogleAuthenticationVerified))
}

// addPredicate implements the predicateAdder interface.
func (aueq *AppUserExtraQuery) addPredicate(pred func(s *sql.Selector)) {
	aueq.predicates = append(aueq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserExtraQuery builder.
func (aueq *AppUserExtraQuery) Filter() *AppUserExtraFilter {
	return &AppUserExtraFilter{aueq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserExtraMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserExtraMutation builder.
func (m *AppUserExtraMutation) Filter() *AppUserExtraFilter {
	return &AppUserExtraFilter{m}
}

// AppUserExtraFilter provides a generic filtering capability at runtime for AppUserExtraQuery.
type AppUserExtraFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppUserExtraFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppUserExtraFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appuserextra.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserExtraFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserExtraFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserExtraFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserExtraFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appuserextra.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppUserExtraFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(appuserextra.FieldUserID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *AppUserExtraFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldUsername))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *AppUserExtraFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *AppUserExtraFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldLastName))
}

// WhereAddressFields applies the entql json.RawMessage predicate on the address_fields field.
func (f *AppUserExtraFilter) WhereAddressFields(p entql.BytesP) {
	f.Where(p.Field(appuserextra.FieldAddressFields))
}

// WhereGender applies the entql string predicate on the gender field.
func (f *AppUserExtraFilter) WhereGender(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldGender))
}

// WherePostalCode applies the entql string predicate on the postal_code field.
func (f *AppUserExtraFilter) WherePostalCode(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldPostalCode))
}

// WhereAge applies the entql uint32 predicate on the age field.
func (f *AppUserExtraFilter) WhereAge(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldAge))
}

// WhereBirthday applies the entql uint32 predicate on the birthday field.
func (f *AppUserExtraFilter) WhereBirthday(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldBirthday))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *AppUserExtraFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldAvatar))
}

// WhereOrganization applies the entql string predicate on the organization field.
func (f *AppUserExtraFilter) WhereOrganization(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldOrganization))
}

// WhereIDNumber applies the entql string predicate on the id_number field.
func (f *AppUserExtraFilter) WhereIDNumber(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldIDNumber))
}

// addPredicate implements the predicateAdder interface.
func (ausq *AppUserSecretQuery) addPredicate(pred func(s *sql.Selector)) {
	ausq.predicates = append(ausq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserSecretQuery builder.
func (ausq *AppUserSecretQuery) Filter() *AppUserSecretFilter {
	return &AppUserSecretFilter{ausq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserSecretMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserSecretMutation builder.
func (m *AppUserSecretMutation) Filter() *AppUserSecretFilter {
	return &AppUserSecretFilter{m}
}

// AppUserSecretFilter provides a generic filtering capability at runtime for AppUserSecretQuery.
type AppUserSecretFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppUserSecretFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppUserSecretFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appusersecret.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserSecretFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appusersecret.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserSecretFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appusersecret.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserSecretFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appusersecret.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserSecretFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appusersecret.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppUserSecretFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(appusersecret.FieldUserID))
}

// WherePasswordHash applies the entql string predicate on the password_hash field.
func (f *AppUserSecretFilter) WherePasswordHash(p entql.StringP) {
	f.Where(p.Field(appusersecret.FieldPasswordHash))
}

// WhereSalt applies the entql string predicate on the salt field.
func (f *AppUserSecretFilter) WhereSalt(p entql.StringP) {
	f.Where(p.Field(appusersecret.FieldSalt))
}

// WhereGoogleSecret applies the entql string predicate on the google_secret field.
func (f *AppUserSecretFilter) WhereGoogleSecret(p entql.StringP) {
	f.Where(p.Field(appusersecret.FieldGoogleSecret))
}

// addPredicate implements the predicateAdder interface.
func (autpq *AppUserThirdPartyQuery) addPredicate(pred func(s *sql.Selector)) {
	autpq.predicates = append(autpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserThirdPartyQuery builder.
func (autpq *AppUserThirdPartyQuery) Filter() *AppUserThirdPartyFilter {
	return &AppUserThirdPartyFilter{autpq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserThirdPartyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserThirdPartyMutation builder.
func (m *AppUserThirdPartyMutation) Filter() *AppUserThirdPartyFilter {
	return &AppUserThirdPartyFilter{m}
}

// AppUserThirdPartyFilter provides a generic filtering capability at runtime for AppUserThirdPartyQuery.
type AppUserThirdPartyFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppUserThirdPartyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppUserThirdPartyFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appuserthirdparty.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserThirdPartyFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserthirdparty.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserThirdPartyFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserthirdparty.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserThirdPartyFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserthirdparty.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserThirdPartyFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appuserthirdparty.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppUserThirdPartyFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(appuserthirdparty.FieldUserID))
}

// WhereThirdPartyUserID applies the entql string predicate on the third_party_user_id field.
func (f *AppUserThirdPartyFilter) WhereThirdPartyUserID(p entql.StringP) {
	f.Where(p.Field(appuserthirdparty.FieldThirdPartyUserID))
}

// WhereThirdPartyID applies the entql string predicate on the third_party_id field.
func (f *AppUserThirdPartyFilter) WhereThirdPartyID(p entql.StringP) {
	f.Where(p.Field(appuserthirdparty.FieldThirdPartyID))
}

// WhereThirdPartyUsername applies the entql string predicate on the third_party_username field.
func (f *AppUserThirdPartyFilter) WhereThirdPartyUsername(p entql.StringP) {
	f.Where(p.Field(appuserthirdparty.FieldThirdPartyUsername))
}

// WhereThirdPartyUserAvatar applies the entql string predicate on the third_party_user_avatar field.
func (f *AppUserThirdPartyFilter) WhereThirdPartyUserAvatar(p entql.StringP) {
	f.Where(p.Field(appuserthirdparty.FieldThirdPartyUserAvatar))
}

// addPredicate implements the predicateAdder interface.
func (baq *BanAppQuery) addPredicate(pred func(s *sql.Selector)) {
	baq.predicates = append(baq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BanAppQuery builder.
func (baq *BanAppQuery) Filter() *BanAppFilter {
	return &BanAppFilter{baq}
}

// addPredicate implements the predicateAdder interface.
func (m *BanAppMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BanAppMutation builder.
func (m *BanAppMutation) Filter() *BanAppFilter {
	return &BanAppFilter{m}
}

// BanAppFilter provides a generic filtering capability at runtime for BanAppQuery.
type BanAppFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BanAppFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *BanAppFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(banapp.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *BanAppFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(banapp.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *BanAppFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(banapp.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *BanAppFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(banapp.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *BanAppFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(banapp.FieldAppID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *BanAppFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(banapp.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (bauq *BanAppUserQuery) addPredicate(pred func(s *sql.Selector)) {
	bauq.predicates = append(bauq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BanAppUserQuery builder.
func (bauq *BanAppUserQuery) Filter() *BanAppUserFilter {
	return &BanAppUserFilter{bauq}
}

// addPredicate implements the predicateAdder interface.
func (m *BanAppUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BanAppUserMutation builder.
func (m *BanAppUserMutation) Filter() *BanAppUserFilter {
	return &BanAppUserFilter{m}
}

// BanAppUserFilter provides a generic filtering capability at runtime for BanAppUserQuery.
type BanAppUserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BanAppUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *BanAppUserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(banappuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *BanAppUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(banappuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *BanAppUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(banappuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *BanAppUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(banappuser.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *BanAppUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(banappuser.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *BanAppUserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(banappuser.FieldUserID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *BanAppUserFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(banappuser.FieldMessage))
}
