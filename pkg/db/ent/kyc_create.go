// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/kyc"
	"github.com/google/uuid"
)

// KycCreate is the builder for creating a Kyc entity.
type KycCreate struct {
	config
	mutation *KycMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (kc *KycCreate) SetCreatedAt(u uint32) *KycCreate {
	kc.mutation.SetCreatedAt(u)
	return kc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kc *KycCreate) SetNillableCreatedAt(u *uint32) *KycCreate {
	if u != nil {
		kc.SetCreatedAt(*u)
	}
	return kc
}

// SetUpdatedAt sets the "updated_at" field.
func (kc *KycCreate) SetUpdatedAt(u uint32) *KycCreate {
	kc.mutation.SetUpdatedAt(u)
	return kc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kc *KycCreate) SetNillableUpdatedAt(u *uint32) *KycCreate {
	if u != nil {
		kc.SetUpdatedAt(*u)
	}
	return kc
}

// SetDeletedAt sets the "deleted_at" field.
func (kc *KycCreate) SetDeletedAt(u uint32) *KycCreate {
	kc.mutation.SetDeletedAt(u)
	return kc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kc *KycCreate) SetNillableDeletedAt(u *uint32) *KycCreate {
	if u != nil {
		kc.SetDeletedAt(*u)
	}
	return kc
}

// SetAppID sets the "app_id" field.
func (kc *KycCreate) SetAppID(u uuid.UUID) *KycCreate {
	kc.mutation.SetAppID(u)
	return kc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (kc *KycCreate) SetNillableAppID(u *uuid.UUID) *KycCreate {
	if u != nil {
		kc.SetAppID(*u)
	}
	return kc
}

// SetUserID sets the "user_id" field.
func (kc *KycCreate) SetUserID(u uuid.UUID) *KycCreate {
	kc.mutation.SetUserID(u)
	return kc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (kc *KycCreate) SetNillableUserID(u *uuid.UUID) *KycCreate {
	if u != nil {
		kc.SetUserID(*u)
	}
	return kc
}

// SetDocumentType sets the "document_type" field.
func (kc *KycCreate) SetDocumentType(s string) *KycCreate {
	kc.mutation.SetDocumentType(s)
	return kc
}

// SetNillableDocumentType sets the "document_type" field if the given value is not nil.
func (kc *KycCreate) SetNillableDocumentType(s *string) *KycCreate {
	if s != nil {
		kc.SetDocumentType(*s)
	}
	return kc
}

// SetIDNumber sets the "id_number" field.
func (kc *KycCreate) SetIDNumber(s string) *KycCreate {
	kc.mutation.SetIDNumber(s)
	return kc
}

// SetNillableIDNumber sets the "id_number" field if the given value is not nil.
func (kc *KycCreate) SetNillableIDNumber(s *string) *KycCreate {
	if s != nil {
		kc.SetIDNumber(*s)
	}
	return kc
}

// SetFrontImg sets the "front_img" field.
func (kc *KycCreate) SetFrontImg(s string) *KycCreate {
	kc.mutation.SetFrontImg(s)
	return kc
}

// SetNillableFrontImg sets the "front_img" field if the given value is not nil.
func (kc *KycCreate) SetNillableFrontImg(s *string) *KycCreate {
	if s != nil {
		kc.SetFrontImg(*s)
	}
	return kc
}

// SetBackImg sets the "back_img" field.
func (kc *KycCreate) SetBackImg(s string) *KycCreate {
	kc.mutation.SetBackImg(s)
	return kc
}

// SetNillableBackImg sets the "back_img" field if the given value is not nil.
func (kc *KycCreate) SetNillableBackImg(s *string) *KycCreate {
	if s != nil {
		kc.SetBackImg(*s)
	}
	return kc
}

// SetSelfieImg sets the "selfie_img" field.
func (kc *KycCreate) SetSelfieImg(s string) *KycCreate {
	kc.mutation.SetSelfieImg(s)
	return kc
}

// SetNillableSelfieImg sets the "selfie_img" field if the given value is not nil.
func (kc *KycCreate) SetNillableSelfieImg(s *string) *KycCreate {
	if s != nil {
		kc.SetSelfieImg(*s)
	}
	return kc
}

// SetEntityType sets the "entity_type" field.
func (kc *KycCreate) SetEntityType(s string) *KycCreate {
	kc.mutation.SetEntityType(s)
	return kc
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (kc *KycCreate) SetNillableEntityType(s *string) *KycCreate {
	if s != nil {
		kc.SetEntityType(*s)
	}
	return kc
}

// SetReviewID sets the "review_id" field.
func (kc *KycCreate) SetReviewID(u uuid.UUID) *KycCreate {
	kc.mutation.SetReviewID(u)
	return kc
}

// SetNillableReviewID sets the "review_id" field if the given value is not nil.
func (kc *KycCreate) SetNillableReviewID(u *uuid.UUID) *KycCreate {
	if u != nil {
		kc.SetReviewID(*u)
	}
	return kc
}

// SetState sets the "state" field.
func (kc *KycCreate) SetState(s string) *KycCreate {
	kc.mutation.SetState(s)
	return kc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (kc *KycCreate) SetNillableState(s *string) *KycCreate {
	if s != nil {
		kc.SetState(*s)
	}
	return kc
}

// SetID sets the "id" field.
func (kc *KycCreate) SetID(u uuid.UUID) *KycCreate {
	kc.mutation.SetID(u)
	return kc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (kc *KycCreate) SetNillableID(u *uuid.UUID) *KycCreate {
	if u != nil {
		kc.SetID(*u)
	}
	return kc
}

// Mutation returns the KycMutation object of the builder.
func (kc *KycCreate) Mutation() *KycMutation {
	return kc.mutation
}

// Save creates the Kyc in the database.
func (kc *KycCreate) Save(ctx context.Context) (*Kyc, error) {
	var (
		err  error
		node *Kyc
	)
	if err := kc.defaults(); err != nil {
		return nil, err
	}
	if len(kc.hooks) == 0 {
		if err = kc.check(); err != nil {
			return nil, err
		}
		node, err = kc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KycMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kc.check(); err != nil {
				return nil, err
			}
			kc.mutation = mutation
			if node, err = kc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(kc.hooks) - 1; i >= 0; i-- {
			if kc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Kyc)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KycMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KycCreate) SaveX(ctx context.Context) *Kyc {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kc *KycCreate) Exec(ctx context.Context) error {
	_, err := kc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kc *KycCreate) ExecX(ctx context.Context) {
	if err := kc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kc *KycCreate) defaults() error {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		if kyc.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized kyc.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := kyc.DefaultCreatedAt()
		kc.mutation.SetCreatedAt(v)
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		if kyc.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kyc.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kyc.DefaultUpdatedAt()
		kc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kc.mutation.DeletedAt(); !ok {
		if kyc.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized kyc.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := kyc.DefaultDeletedAt()
		kc.mutation.SetDeletedAt(v)
	}
	if _, ok := kc.mutation.AppID(); !ok {
		if kyc.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized kyc.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := kyc.DefaultAppID()
		kc.mutation.SetAppID(v)
	}
	if _, ok := kc.mutation.UserID(); !ok {
		if kyc.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized kyc.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := kyc.DefaultUserID()
		kc.mutation.SetUserID(v)
	}
	if _, ok := kc.mutation.DocumentType(); !ok {
		v := kyc.DefaultDocumentType
		kc.mutation.SetDocumentType(v)
	}
	if _, ok := kc.mutation.IDNumber(); !ok {
		v := kyc.DefaultIDNumber
		kc.mutation.SetIDNumber(v)
	}
	if _, ok := kc.mutation.FrontImg(); !ok {
		v := kyc.DefaultFrontImg
		kc.mutation.SetFrontImg(v)
	}
	if _, ok := kc.mutation.BackImg(); !ok {
		v := kyc.DefaultBackImg
		kc.mutation.SetBackImg(v)
	}
	if _, ok := kc.mutation.SelfieImg(); !ok {
		v := kyc.DefaultSelfieImg
		kc.mutation.SetSelfieImg(v)
	}
	if _, ok := kc.mutation.EntityType(); !ok {
		v := kyc.DefaultEntityType
		kc.mutation.SetEntityType(v)
	}
	if _, ok := kc.mutation.ReviewID(); !ok {
		if kyc.DefaultReviewID == nil {
			return fmt.Errorf("ent: uninitialized kyc.DefaultReviewID (forgotten import ent/runtime?)")
		}
		v := kyc.DefaultReviewID()
		kc.mutation.SetReviewID(v)
	}
	if _, ok := kc.mutation.State(); !ok {
		v := kyc.DefaultState
		kc.mutation.SetState(v)
	}
	if _, ok := kc.mutation.ID(); !ok {
		if kyc.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized kyc.DefaultID (forgotten import ent/runtime?)")
		}
		v := kyc.DefaultID()
		kc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (kc *KycCreate) check() error {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Kyc.created_at"`)}
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Kyc.updated_at"`)}
	}
	if _, ok := kc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Kyc.deleted_at"`)}
	}
	return nil
}

func (kc *KycCreate) sqlSave(ctx context.Context) (*Kyc, error) {
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (kc *KycCreate) createSpec() (*Kyc, *sqlgraph.CreateSpec) {
	var (
		_node = &Kyc{config: kc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kyc.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: kyc.FieldID,
			},
		}
	)
	_spec.OnConflict = kc.conflict
	if id, ok := kc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := kc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kyc.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := kc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kyc.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := kc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kyc.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := kc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: kyc.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := kc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: kyc.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := kc.mutation.DocumentType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kyc.FieldDocumentType,
		})
		_node.DocumentType = value
	}
	if value, ok := kc.mutation.IDNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kyc.FieldIDNumber,
		})
		_node.IDNumber = value
	}
	if value, ok := kc.mutation.FrontImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kyc.FieldFrontImg,
		})
		_node.FrontImg = value
	}
	if value, ok := kc.mutation.BackImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kyc.FieldBackImg,
		})
		_node.BackImg = value
	}
	if value, ok := kc.mutation.SelfieImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kyc.FieldSelfieImg,
		})
		_node.SelfieImg = value
	}
	if value, ok := kc.mutation.EntityType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kyc.FieldEntityType,
		})
		_node.EntityType = value
	}
	if value, ok := kc.mutation.ReviewID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: kyc.FieldReviewID,
		})
		_node.ReviewID = value
	}
	if value, ok := kc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kyc.FieldState,
		})
		_node.State = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Kyc.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KycUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (kc *KycCreate) OnConflict(opts ...sql.ConflictOption) *KycUpsertOne {
	kc.conflict = opts
	return &KycUpsertOne{
		create: kc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Kyc.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (kc *KycCreate) OnConflictColumns(columns ...string) *KycUpsertOne {
	kc.conflict = append(kc.conflict, sql.ConflictColumns(columns...))
	return &KycUpsertOne{
		create: kc,
	}
}

type (
	// KycUpsertOne is the builder for "upsert"-ing
	//  one Kyc node.
	KycUpsertOne struct {
		create *KycCreate
	}

	// KycUpsert is the "OnConflict" setter.
	KycUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *KycUpsert) SetCreatedAt(v uint32) *KycUpsert {
	u.Set(kyc.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KycUpsert) UpdateCreatedAt() *KycUpsert {
	u.SetExcluded(kyc.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KycUpsert) AddCreatedAt(v uint32) *KycUpsert {
	u.Add(kyc.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KycUpsert) SetUpdatedAt(v uint32) *KycUpsert {
	u.Set(kyc.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KycUpsert) UpdateUpdatedAt() *KycUpsert {
	u.SetExcluded(kyc.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KycUpsert) AddUpdatedAt(v uint32) *KycUpsert {
	u.Add(kyc.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KycUpsert) SetDeletedAt(v uint32) *KycUpsert {
	u.Set(kyc.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KycUpsert) UpdateDeletedAt() *KycUpsert {
	u.SetExcluded(kyc.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KycUpsert) AddDeletedAt(v uint32) *KycUpsert {
	u.Add(kyc.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *KycUpsert) SetAppID(v uuid.UUID) *KycUpsert {
	u.Set(kyc.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *KycUpsert) UpdateAppID() *KycUpsert {
	u.SetExcluded(kyc.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *KycUpsert) ClearAppID() *KycUpsert {
	u.SetNull(kyc.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *KycUpsert) SetUserID(v uuid.UUID) *KycUpsert {
	u.Set(kyc.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *KycUpsert) UpdateUserID() *KycUpsert {
	u.SetExcluded(kyc.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *KycUpsert) ClearUserID() *KycUpsert {
	u.SetNull(kyc.FieldUserID)
	return u
}

// SetDocumentType sets the "document_type" field.
func (u *KycUpsert) SetDocumentType(v string) *KycUpsert {
	u.Set(kyc.FieldDocumentType, v)
	return u
}

// UpdateDocumentType sets the "document_type" field to the value that was provided on create.
func (u *KycUpsert) UpdateDocumentType() *KycUpsert {
	u.SetExcluded(kyc.FieldDocumentType)
	return u
}

// ClearDocumentType clears the value of the "document_type" field.
func (u *KycUpsert) ClearDocumentType() *KycUpsert {
	u.SetNull(kyc.FieldDocumentType)
	return u
}

// SetIDNumber sets the "id_number" field.
func (u *KycUpsert) SetIDNumber(v string) *KycUpsert {
	u.Set(kyc.FieldIDNumber, v)
	return u
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *KycUpsert) UpdateIDNumber() *KycUpsert {
	u.SetExcluded(kyc.FieldIDNumber)
	return u
}

// ClearIDNumber clears the value of the "id_number" field.
func (u *KycUpsert) ClearIDNumber() *KycUpsert {
	u.SetNull(kyc.FieldIDNumber)
	return u
}

// SetFrontImg sets the "front_img" field.
func (u *KycUpsert) SetFrontImg(v string) *KycUpsert {
	u.Set(kyc.FieldFrontImg, v)
	return u
}

// UpdateFrontImg sets the "front_img" field to the value that was provided on create.
func (u *KycUpsert) UpdateFrontImg() *KycUpsert {
	u.SetExcluded(kyc.FieldFrontImg)
	return u
}

// ClearFrontImg clears the value of the "front_img" field.
func (u *KycUpsert) ClearFrontImg() *KycUpsert {
	u.SetNull(kyc.FieldFrontImg)
	return u
}

// SetBackImg sets the "back_img" field.
func (u *KycUpsert) SetBackImg(v string) *KycUpsert {
	u.Set(kyc.FieldBackImg, v)
	return u
}

// UpdateBackImg sets the "back_img" field to the value that was provided on create.
func (u *KycUpsert) UpdateBackImg() *KycUpsert {
	u.SetExcluded(kyc.FieldBackImg)
	return u
}

// ClearBackImg clears the value of the "back_img" field.
func (u *KycUpsert) ClearBackImg() *KycUpsert {
	u.SetNull(kyc.FieldBackImg)
	return u
}

// SetSelfieImg sets the "selfie_img" field.
func (u *KycUpsert) SetSelfieImg(v string) *KycUpsert {
	u.Set(kyc.FieldSelfieImg, v)
	return u
}

// UpdateSelfieImg sets the "selfie_img" field to the value that was provided on create.
func (u *KycUpsert) UpdateSelfieImg() *KycUpsert {
	u.SetExcluded(kyc.FieldSelfieImg)
	return u
}

// ClearSelfieImg clears the value of the "selfie_img" field.
func (u *KycUpsert) ClearSelfieImg() *KycUpsert {
	u.SetNull(kyc.FieldSelfieImg)
	return u
}

// SetEntityType sets the "entity_type" field.
func (u *KycUpsert) SetEntityType(v string) *KycUpsert {
	u.Set(kyc.FieldEntityType, v)
	return u
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *KycUpsert) UpdateEntityType() *KycUpsert {
	u.SetExcluded(kyc.FieldEntityType)
	return u
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *KycUpsert) ClearEntityType() *KycUpsert {
	u.SetNull(kyc.FieldEntityType)
	return u
}

// SetReviewID sets the "review_id" field.
func (u *KycUpsert) SetReviewID(v uuid.UUID) *KycUpsert {
	u.Set(kyc.FieldReviewID, v)
	return u
}

// UpdateReviewID sets the "review_id" field to the value that was provided on create.
func (u *KycUpsert) UpdateReviewID() *KycUpsert {
	u.SetExcluded(kyc.FieldReviewID)
	return u
}

// ClearReviewID clears the value of the "review_id" field.
func (u *KycUpsert) ClearReviewID() *KycUpsert {
	u.SetNull(kyc.FieldReviewID)
	return u
}

// SetState sets the "state" field.
func (u *KycUpsert) SetState(v string) *KycUpsert {
	u.Set(kyc.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *KycUpsert) UpdateState() *KycUpsert {
	u.SetExcluded(kyc.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *KycUpsert) ClearState() *KycUpsert {
	u.SetNull(kyc.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Kyc.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kyc.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *KycUpsertOne) UpdateNewValues() *KycUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(kyc.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Kyc.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *KycUpsertOne) Ignore() *KycUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KycUpsertOne) DoNothing() *KycUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KycCreate.OnConflict
// documentation for more info.
func (u *KycUpsertOne) Update(set func(*KycUpsert)) *KycUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KycUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KycUpsertOne) SetCreatedAt(v uint32) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KycUpsertOne) AddCreatedAt(v uint32) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateCreatedAt() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KycUpsertOne) SetUpdatedAt(v uint32) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KycUpsertOne) AddUpdatedAt(v uint32) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateUpdatedAt() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KycUpsertOne) SetDeletedAt(v uint32) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KycUpsertOne) AddDeletedAt(v uint32) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateDeletedAt() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *KycUpsertOne) SetAppID(v uuid.UUID) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateAppID() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *KycUpsertOne) ClearAppID() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *KycUpsertOne) SetUserID(v uuid.UUID) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateUserID() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *KycUpsertOne) ClearUserID() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearUserID()
	})
}

// SetDocumentType sets the "document_type" field.
func (u *KycUpsertOne) SetDocumentType(v string) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetDocumentType(v)
	})
}

// UpdateDocumentType sets the "document_type" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateDocumentType() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateDocumentType()
	})
}

// ClearDocumentType clears the value of the "document_type" field.
func (u *KycUpsertOne) ClearDocumentType() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearDocumentType()
	})
}

// SetIDNumber sets the "id_number" field.
func (u *KycUpsertOne) SetIDNumber(v string) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetIDNumber(v)
	})
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateIDNumber() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateIDNumber()
	})
}

// ClearIDNumber clears the value of the "id_number" field.
func (u *KycUpsertOne) ClearIDNumber() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearIDNumber()
	})
}

// SetFrontImg sets the "front_img" field.
func (u *KycUpsertOne) SetFrontImg(v string) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetFrontImg(v)
	})
}

// UpdateFrontImg sets the "front_img" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateFrontImg() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateFrontImg()
	})
}

// ClearFrontImg clears the value of the "front_img" field.
func (u *KycUpsertOne) ClearFrontImg() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearFrontImg()
	})
}

// SetBackImg sets the "back_img" field.
func (u *KycUpsertOne) SetBackImg(v string) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetBackImg(v)
	})
}

// UpdateBackImg sets the "back_img" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateBackImg() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateBackImg()
	})
}

// ClearBackImg clears the value of the "back_img" field.
func (u *KycUpsertOne) ClearBackImg() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearBackImg()
	})
}

// SetSelfieImg sets the "selfie_img" field.
func (u *KycUpsertOne) SetSelfieImg(v string) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetSelfieImg(v)
	})
}

// UpdateSelfieImg sets the "selfie_img" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateSelfieImg() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateSelfieImg()
	})
}

// ClearSelfieImg clears the value of the "selfie_img" field.
func (u *KycUpsertOne) ClearSelfieImg() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearSelfieImg()
	})
}

// SetEntityType sets the "entity_type" field.
func (u *KycUpsertOne) SetEntityType(v string) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetEntityType(v)
	})
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateEntityType() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateEntityType()
	})
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *KycUpsertOne) ClearEntityType() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearEntityType()
	})
}

// SetReviewID sets the "review_id" field.
func (u *KycUpsertOne) SetReviewID(v uuid.UUID) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetReviewID(v)
	})
}

// UpdateReviewID sets the "review_id" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateReviewID() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateReviewID()
	})
}

// ClearReviewID clears the value of the "review_id" field.
func (u *KycUpsertOne) ClearReviewID() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearReviewID()
	})
}

// SetState sets the "state" field.
func (u *KycUpsertOne) SetState(v string) *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *KycUpsertOne) UpdateState() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *KycUpsertOne) ClearState() *KycUpsertOne {
	return u.Update(func(s *KycUpsert) {
		s.ClearState()
	})
}

// Exec executes the query.
func (u *KycUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KycCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KycUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KycUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KycUpsertOne.ID is not supported by MySQL driver. Use KycUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KycUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KycCreateBulk is the builder for creating many Kyc entities in bulk.
type KycCreateBulk struct {
	config
	builders []*KycCreate
	conflict []sql.ConflictOption
}

// Save creates the Kyc entities in the database.
func (kcb *KycCreateBulk) Save(ctx context.Context) ([]*Kyc, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*Kyc, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KycMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KycCreateBulk) SaveX(ctx context.Context) []*Kyc {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcb *KycCreateBulk) Exec(ctx context.Context) error {
	_, err := kcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcb *KycCreateBulk) ExecX(ctx context.Context) {
	if err := kcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Kyc.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KycUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (kcb *KycCreateBulk) OnConflict(opts ...sql.ConflictOption) *KycUpsertBulk {
	kcb.conflict = opts
	return &KycUpsertBulk{
		create: kcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Kyc.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (kcb *KycCreateBulk) OnConflictColumns(columns ...string) *KycUpsertBulk {
	kcb.conflict = append(kcb.conflict, sql.ConflictColumns(columns...))
	return &KycUpsertBulk{
		create: kcb,
	}
}

// KycUpsertBulk is the builder for "upsert"-ing
// a bulk of Kyc nodes.
type KycUpsertBulk struct {
	create *KycCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Kyc.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kyc.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *KycUpsertBulk) UpdateNewValues() *KycUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(kyc.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Kyc.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *KycUpsertBulk) Ignore() *KycUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KycUpsertBulk) DoNothing() *KycUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KycCreateBulk.OnConflict
// documentation for more info.
func (u *KycUpsertBulk) Update(set func(*KycUpsert)) *KycUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KycUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KycUpsertBulk) SetCreatedAt(v uint32) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KycUpsertBulk) AddCreatedAt(v uint32) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateCreatedAt() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KycUpsertBulk) SetUpdatedAt(v uint32) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KycUpsertBulk) AddUpdatedAt(v uint32) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateUpdatedAt() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KycUpsertBulk) SetDeletedAt(v uint32) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KycUpsertBulk) AddDeletedAt(v uint32) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateDeletedAt() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *KycUpsertBulk) SetAppID(v uuid.UUID) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateAppID() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *KycUpsertBulk) ClearAppID() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *KycUpsertBulk) SetUserID(v uuid.UUID) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateUserID() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *KycUpsertBulk) ClearUserID() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearUserID()
	})
}

// SetDocumentType sets the "document_type" field.
func (u *KycUpsertBulk) SetDocumentType(v string) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetDocumentType(v)
	})
}

// UpdateDocumentType sets the "document_type" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateDocumentType() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateDocumentType()
	})
}

// ClearDocumentType clears the value of the "document_type" field.
func (u *KycUpsertBulk) ClearDocumentType() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearDocumentType()
	})
}

// SetIDNumber sets the "id_number" field.
func (u *KycUpsertBulk) SetIDNumber(v string) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetIDNumber(v)
	})
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateIDNumber() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateIDNumber()
	})
}

// ClearIDNumber clears the value of the "id_number" field.
func (u *KycUpsertBulk) ClearIDNumber() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearIDNumber()
	})
}

// SetFrontImg sets the "front_img" field.
func (u *KycUpsertBulk) SetFrontImg(v string) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetFrontImg(v)
	})
}

// UpdateFrontImg sets the "front_img" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateFrontImg() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateFrontImg()
	})
}

// ClearFrontImg clears the value of the "front_img" field.
func (u *KycUpsertBulk) ClearFrontImg() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearFrontImg()
	})
}

// SetBackImg sets the "back_img" field.
func (u *KycUpsertBulk) SetBackImg(v string) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetBackImg(v)
	})
}

// UpdateBackImg sets the "back_img" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateBackImg() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateBackImg()
	})
}

// ClearBackImg clears the value of the "back_img" field.
func (u *KycUpsertBulk) ClearBackImg() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearBackImg()
	})
}

// SetSelfieImg sets the "selfie_img" field.
func (u *KycUpsertBulk) SetSelfieImg(v string) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetSelfieImg(v)
	})
}

// UpdateSelfieImg sets the "selfie_img" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateSelfieImg() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateSelfieImg()
	})
}

// ClearSelfieImg clears the value of the "selfie_img" field.
func (u *KycUpsertBulk) ClearSelfieImg() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearSelfieImg()
	})
}

// SetEntityType sets the "entity_type" field.
func (u *KycUpsertBulk) SetEntityType(v string) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetEntityType(v)
	})
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateEntityType() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateEntityType()
	})
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *KycUpsertBulk) ClearEntityType() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearEntityType()
	})
}

// SetReviewID sets the "review_id" field.
func (u *KycUpsertBulk) SetReviewID(v uuid.UUID) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetReviewID(v)
	})
}

// UpdateReviewID sets the "review_id" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateReviewID() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateReviewID()
	})
}

// ClearReviewID clears the value of the "review_id" field.
func (u *KycUpsertBulk) ClearReviewID() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearReviewID()
	})
}

// SetState sets the "state" field.
func (u *KycUpsertBulk) SetState(v string) *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *KycUpsertBulk) UpdateState() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *KycUpsertBulk) ClearState() *KycUpsertBulk {
	return u.Update(func(s *KycUpsert) {
		s.ClearState()
	})
}

// Exec executes the query.
func (u *KycUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KycCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KycCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KycUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
