// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appusersecret"
	"github.com/google/uuid"
)

// AppUserSecret is the model entity for the AppUserSecret schema.
type AppUserSecret struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// Salt holds the value of the "salt" field.
	Salt string `json:"salt,omitempty"`
	// GoogleSecret holds the value of the "google_secret" field.
	GoogleSecret string `json:"google_secret,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUserSecret) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appusersecret.FieldCreatedAt, appusersecret.FieldUpdatedAt, appusersecret.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case appusersecret.FieldPasswordHash, appusersecret.FieldSalt, appusersecret.FieldGoogleSecret:
			values[i] = new(sql.NullString)
		case appusersecret.FieldID, appusersecret.FieldAppID, appusersecret.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUserSecret", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUserSecret fields.
func (aus *AppUserSecret) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appusersecret.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aus.ID = *value
			}
		case appusersecret.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aus.CreatedAt = uint32(value.Int64)
			}
		case appusersecret.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aus.UpdatedAt = uint32(value.Int64)
			}
		case appusersecret.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				aus.DeletedAt = uint32(value.Int64)
			}
		case appusersecret.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				aus.AppID = *value
			}
		case appusersecret.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				aus.UserID = *value
			}
		case appusersecret.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				aus.PasswordHash = value.String
			}
		case appusersecret.FieldSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value.Valid {
				aus.Salt = value.String
			}
		case appusersecret.FieldGoogleSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field google_secret", values[i])
			} else if value.Valid {
				aus.GoogleSecret = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppUserSecret.
// Note that you need to call AppUserSecret.Unwrap() before calling this method if this AppUserSecret
// was returned from a transaction, and the transaction was committed or rolled back.
func (aus *AppUserSecret) Update() *AppUserSecretUpdateOne {
	return (&AppUserSecretClient{config: aus.config}).UpdateOne(aus)
}

// Unwrap unwraps the AppUserSecret entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aus *AppUserSecret) Unwrap() *AppUserSecret {
	tx, ok := aus.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUserSecret is not a transactional entity")
	}
	aus.config.driver = tx.drv
	return aus
}

// String implements the fmt.Stringer.
func (aus *AppUserSecret) String() string {
	var builder strings.Builder
	builder.WriteString("AppUserSecret(")
	builder.WriteString(fmt.Sprintf("id=%v", aus.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", aus.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", aus.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", aus.DeletedAt))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", aus.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", aus.UserID))
	builder.WriteString(", password_hash=")
	builder.WriteString(aus.PasswordHash)
	builder.WriteString(", salt=")
	builder.WriteString(aus.Salt)
	builder.WriteString(", google_secret=")
	builder.WriteString(aus.GoogleSecret)
	builder.WriteByte(')')
	return builder.String()
}

// AppUserSecrets is a parsable slice of AppUserSecret.
type AppUserSecrets []*AppUserSecret

func (aus AppUserSecrets) config(cfg config) {
	for _i := range aus {
		aus[_i].config = cfg
	}
}
