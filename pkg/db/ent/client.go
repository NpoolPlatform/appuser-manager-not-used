// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/app"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appcontrol"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approle"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approleuser"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuser"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appusercontrol"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuserextra"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appusersecret"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuserthirdparty"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/banapp"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/banappuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// App is the client for interacting with the App builders.
	App *AppClient
	// AppControl is the client for interacting with the AppControl builders.
	AppControl *AppControlClient
	// AppRole is the client for interacting with the AppRole builders.
	AppRole *AppRoleClient
	// AppRoleUser is the client for interacting with the AppRoleUser builders.
	AppRoleUser *AppRoleUserClient
	// AppUser is the client for interacting with the AppUser builders.
	AppUser *AppUserClient
	// AppUserControl is the client for interacting with the AppUserControl builders.
	AppUserControl *AppUserControlClient
	// AppUserExtra is the client for interacting with the AppUserExtra builders.
	AppUserExtra *AppUserExtraClient
	// AppUserSecret is the client for interacting with the AppUserSecret builders.
	AppUserSecret *AppUserSecretClient
	// AppUserThirdParty is the client for interacting with the AppUserThirdParty builders.
	AppUserThirdParty *AppUserThirdPartyClient
	// BanApp is the client for interacting with the BanApp builders.
	BanApp *BanAppClient
	// BanAppUser is the client for interacting with the BanAppUser builders.
	BanAppUser *BanAppUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.App = NewAppClient(c.config)
	c.AppControl = NewAppControlClient(c.config)
	c.AppRole = NewAppRoleClient(c.config)
	c.AppRoleUser = NewAppRoleUserClient(c.config)
	c.AppUser = NewAppUserClient(c.config)
	c.AppUserControl = NewAppUserControlClient(c.config)
	c.AppUserExtra = NewAppUserExtraClient(c.config)
	c.AppUserSecret = NewAppUserSecretClient(c.config)
	c.AppUserThirdParty = NewAppUserThirdPartyClient(c.config)
	c.BanApp = NewBanAppClient(c.config)
	c.BanAppUser = NewBanAppUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		App:               NewAppClient(cfg),
		AppControl:        NewAppControlClient(cfg),
		AppRole:           NewAppRoleClient(cfg),
		AppRoleUser:       NewAppRoleUserClient(cfg),
		AppUser:           NewAppUserClient(cfg),
		AppUserControl:    NewAppUserControlClient(cfg),
		AppUserExtra:      NewAppUserExtraClient(cfg),
		AppUserSecret:     NewAppUserSecretClient(cfg),
		AppUserThirdParty: NewAppUserThirdPartyClient(cfg),
		BanApp:            NewBanAppClient(cfg),
		BanAppUser:        NewBanAppUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		App:               NewAppClient(cfg),
		AppControl:        NewAppControlClient(cfg),
		AppRole:           NewAppRoleClient(cfg),
		AppRoleUser:       NewAppRoleUserClient(cfg),
		AppUser:           NewAppUserClient(cfg),
		AppUserControl:    NewAppUserControlClient(cfg),
		AppUserExtra:      NewAppUserExtraClient(cfg),
		AppUserSecret:     NewAppUserSecretClient(cfg),
		AppUserThirdParty: NewAppUserThirdPartyClient(cfg),
		BanApp:            NewBanAppClient(cfg),
		BanAppUser:        NewBanAppUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		App.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.App.Use(hooks...)
	c.AppControl.Use(hooks...)
	c.AppRole.Use(hooks...)
	c.AppRoleUser.Use(hooks...)
	c.AppUser.Use(hooks...)
	c.AppUserControl.Use(hooks...)
	c.AppUserExtra.Use(hooks...)
	c.AppUserSecret.Use(hooks...)
	c.AppUserThirdParty.Use(hooks...)
	c.BanApp.Use(hooks...)
	c.BanAppUser.Use(hooks...)
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `app.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Create returns a create builder for App.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id uuid.UUID) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppClient) DeleteOneID(id uuid.UUID) *AppDeleteOne {
	builder := c.Delete().Where(app.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id uuid.UUID) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id uuid.UUID) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	hooks := c.hooks.App
	return append(hooks[:len(hooks):len(hooks)], app.Hooks[:]...)
}

// AppControlClient is a client for the AppControl schema.
type AppControlClient struct {
	config
}

// NewAppControlClient returns a client for the AppControl from the given config.
func NewAppControlClient(c config) *AppControlClient {
	return &AppControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appcontrol.Hooks(f(g(h())))`.
func (c *AppControlClient) Use(hooks ...Hook) {
	c.hooks.AppControl = append(c.hooks.AppControl, hooks...)
}

// Create returns a create builder for AppControl.
func (c *AppControlClient) Create() *AppControlCreate {
	mutation := newAppControlMutation(c.config, OpCreate)
	return &AppControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppControl entities.
func (c *AppControlClient) CreateBulk(builders ...*AppControlCreate) *AppControlCreateBulk {
	return &AppControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppControl.
func (c *AppControlClient) Update() *AppControlUpdate {
	mutation := newAppControlMutation(c.config, OpUpdate)
	return &AppControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppControlClient) UpdateOne(ac *AppControl) *AppControlUpdateOne {
	mutation := newAppControlMutation(c.config, OpUpdateOne, withAppControl(ac))
	return &AppControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppControlClient) UpdateOneID(id uuid.UUID) *AppControlUpdateOne {
	mutation := newAppControlMutation(c.config, OpUpdateOne, withAppControlID(id))
	return &AppControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppControl.
func (c *AppControlClient) Delete() *AppControlDelete {
	mutation := newAppControlMutation(c.config, OpDelete)
	return &AppControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppControlClient) DeleteOne(ac *AppControl) *AppControlDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppControlClient) DeleteOneID(id uuid.UUID) *AppControlDeleteOne {
	builder := c.Delete().Where(appcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppControlDeleteOne{builder}
}

// Query returns a query builder for AppControl.
func (c *AppControlClient) Query() *AppControlQuery {
	return &AppControlQuery{
		config: c.config,
	}
}

// Get returns a AppControl entity by its id.
func (c *AppControlClient) Get(ctx context.Context, id uuid.UUID) (*AppControl, error) {
	return c.Query().Where(appcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppControlClient) GetX(ctx context.Context, id uuid.UUID) *AppControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppControlClient) Hooks() []Hook {
	hooks := c.hooks.AppControl
	return append(hooks[:len(hooks):len(hooks)], appcontrol.Hooks[:]...)
}

// AppRoleClient is a client for the AppRole schema.
type AppRoleClient struct {
	config
}

// NewAppRoleClient returns a client for the AppRole from the given config.
func NewAppRoleClient(c config) *AppRoleClient {
	return &AppRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approle.Hooks(f(g(h())))`.
func (c *AppRoleClient) Use(hooks ...Hook) {
	c.hooks.AppRole = append(c.hooks.AppRole, hooks...)
}

// Create returns a create builder for AppRole.
func (c *AppRoleClient) Create() *AppRoleCreate {
	mutation := newAppRoleMutation(c.config, OpCreate)
	return &AppRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppRole entities.
func (c *AppRoleClient) CreateBulk(builders ...*AppRoleCreate) *AppRoleCreateBulk {
	return &AppRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppRole.
func (c *AppRoleClient) Update() *AppRoleUpdate {
	mutation := newAppRoleMutation(c.config, OpUpdate)
	return &AppRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppRoleClient) UpdateOne(ar *AppRole) *AppRoleUpdateOne {
	mutation := newAppRoleMutation(c.config, OpUpdateOne, withAppRole(ar))
	return &AppRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppRoleClient) UpdateOneID(id uuid.UUID) *AppRoleUpdateOne {
	mutation := newAppRoleMutation(c.config, OpUpdateOne, withAppRoleID(id))
	return &AppRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppRole.
func (c *AppRoleClient) Delete() *AppRoleDelete {
	mutation := newAppRoleMutation(c.config, OpDelete)
	return &AppRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppRoleClient) DeleteOne(ar *AppRole) *AppRoleDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppRoleClient) DeleteOneID(id uuid.UUID) *AppRoleDeleteOne {
	builder := c.Delete().Where(approle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppRoleDeleteOne{builder}
}

// Query returns a query builder for AppRole.
func (c *AppRoleClient) Query() *AppRoleQuery {
	return &AppRoleQuery{
		config: c.config,
	}
}

// Get returns a AppRole entity by its id.
func (c *AppRoleClient) Get(ctx context.Context, id uuid.UUID) (*AppRole, error) {
	return c.Query().Where(approle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppRoleClient) GetX(ctx context.Context, id uuid.UUID) *AppRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppRoleClient) Hooks() []Hook {
	hooks := c.hooks.AppRole
	return append(hooks[:len(hooks):len(hooks)], approle.Hooks[:]...)
}

// AppRoleUserClient is a client for the AppRoleUser schema.
type AppRoleUserClient struct {
	config
}

// NewAppRoleUserClient returns a client for the AppRoleUser from the given config.
func NewAppRoleUserClient(c config) *AppRoleUserClient {
	return &AppRoleUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approleuser.Hooks(f(g(h())))`.
func (c *AppRoleUserClient) Use(hooks ...Hook) {
	c.hooks.AppRoleUser = append(c.hooks.AppRoleUser, hooks...)
}

// Create returns a create builder for AppRoleUser.
func (c *AppRoleUserClient) Create() *AppRoleUserCreate {
	mutation := newAppRoleUserMutation(c.config, OpCreate)
	return &AppRoleUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppRoleUser entities.
func (c *AppRoleUserClient) CreateBulk(builders ...*AppRoleUserCreate) *AppRoleUserCreateBulk {
	return &AppRoleUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppRoleUser.
func (c *AppRoleUserClient) Update() *AppRoleUserUpdate {
	mutation := newAppRoleUserMutation(c.config, OpUpdate)
	return &AppRoleUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppRoleUserClient) UpdateOne(aru *AppRoleUser) *AppRoleUserUpdateOne {
	mutation := newAppRoleUserMutation(c.config, OpUpdateOne, withAppRoleUser(aru))
	return &AppRoleUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppRoleUserClient) UpdateOneID(id uuid.UUID) *AppRoleUserUpdateOne {
	mutation := newAppRoleUserMutation(c.config, OpUpdateOne, withAppRoleUserID(id))
	return &AppRoleUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppRoleUser.
func (c *AppRoleUserClient) Delete() *AppRoleUserDelete {
	mutation := newAppRoleUserMutation(c.config, OpDelete)
	return &AppRoleUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppRoleUserClient) DeleteOne(aru *AppRoleUser) *AppRoleUserDeleteOne {
	return c.DeleteOneID(aru.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppRoleUserClient) DeleteOneID(id uuid.UUID) *AppRoleUserDeleteOne {
	builder := c.Delete().Where(approleuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppRoleUserDeleteOne{builder}
}

// Query returns a query builder for AppRoleUser.
func (c *AppRoleUserClient) Query() *AppRoleUserQuery {
	return &AppRoleUserQuery{
		config: c.config,
	}
}

// Get returns a AppRoleUser entity by its id.
func (c *AppRoleUserClient) Get(ctx context.Context, id uuid.UUID) (*AppRoleUser, error) {
	return c.Query().Where(approleuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppRoleUserClient) GetX(ctx context.Context, id uuid.UUID) *AppRoleUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppRoleUserClient) Hooks() []Hook {
	hooks := c.hooks.AppRoleUser
	return append(hooks[:len(hooks):len(hooks)], approleuser.Hooks[:]...)
}

// AppUserClient is a client for the AppUser schema.
type AppUserClient struct {
	config
}

// NewAppUserClient returns a client for the AppUser from the given config.
func NewAppUserClient(c config) *AppUserClient {
	return &AppUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appuser.Hooks(f(g(h())))`.
func (c *AppUserClient) Use(hooks ...Hook) {
	c.hooks.AppUser = append(c.hooks.AppUser, hooks...)
}

// Create returns a create builder for AppUser.
func (c *AppUserClient) Create() *AppUserCreate {
	mutation := newAppUserMutation(c.config, OpCreate)
	return &AppUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppUser entities.
func (c *AppUserClient) CreateBulk(builders ...*AppUserCreate) *AppUserCreateBulk {
	return &AppUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppUser.
func (c *AppUserClient) Update() *AppUserUpdate {
	mutation := newAppUserMutation(c.config, OpUpdate)
	return &AppUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppUserClient) UpdateOne(au *AppUser) *AppUserUpdateOne {
	mutation := newAppUserMutation(c.config, OpUpdateOne, withAppUser(au))
	return &AppUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppUserClient) UpdateOneID(id uuid.UUID) *AppUserUpdateOne {
	mutation := newAppUserMutation(c.config, OpUpdateOne, withAppUserID(id))
	return &AppUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppUser.
func (c *AppUserClient) Delete() *AppUserDelete {
	mutation := newAppUserMutation(c.config, OpDelete)
	return &AppUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppUserClient) DeleteOne(au *AppUser) *AppUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppUserClient) DeleteOneID(id uuid.UUID) *AppUserDeleteOne {
	builder := c.Delete().Where(appuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppUserDeleteOne{builder}
}

// Query returns a query builder for AppUser.
func (c *AppUserClient) Query() *AppUserQuery {
	return &AppUserQuery{
		config: c.config,
	}
}

// Get returns a AppUser entity by its id.
func (c *AppUserClient) Get(ctx context.Context, id uuid.UUID) (*AppUser, error) {
	return c.Query().Where(appuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppUserClient) GetX(ctx context.Context, id uuid.UUID) *AppUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppUserClient) Hooks() []Hook {
	hooks := c.hooks.AppUser
	return append(hooks[:len(hooks):len(hooks)], appuser.Hooks[:]...)
}

// AppUserControlClient is a client for the AppUserControl schema.
type AppUserControlClient struct {
	config
}

// NewAppUserControlClient returns a client for the AppUserControl from the given config.
func NewAppUserControlClient(c config) *AppUserControlClient {
	return &AppUserControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appusercontrol.Hooks(f(g(h())))`.
func (c *AppUserControlClient) Use(hooks ...Hook) {
	c.hooks.AppUserControl = append(c.hooks.AppUserControl, hooks...)
}

// Create returns a create builder for AppUserControl.
func (c *AppUserControlClient) Create() *AppUserControlCreate {
	mutation := newAppUserControlMutation(c.config, OpCreate)
	return &AppUserControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppUserControl entities.
func (c *AppUserControlClient) CreateBulk(builders ...*AppUserControlCreate) *AppUserControlCreateBulk {
	return &AppUserControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppUserControl.
func (c *AppUserControlClient) Update() *AppUserControlUpdate {
	mutation := newAppUserControlMutation(c.config, OpUpdate)
	return &AppUserControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppUserControlClient) UpdateOne(auc *AppUserControl) *AppUserControlUpdateOne {
	mutation := newAppUserControlMutation(c.config, OpUpdateOne, withAppUserControl(auc))
	return &AppUserControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppUserControlClient) UpdateOneID(id uuid.UUID) *AppUserControlUpdateOne {
	mutation := newAppUserControlMutation(c.config, OpUpdateOne, withAppUserControlID(id))
	return &AppUserControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppUserControl.
func (c *AppUserControlClient) Delete() *AppUserControlDelete {
	mutation := newAppUserControlMutation(c.config, OpDelete)
	return &AppUserControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppUserControlClient) DeleteOne(auc *AppUserControl) *AppUserControlDeleteOne {
	return c.DeleteOneID(auc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppUserControlClient) DeleteOneID(id uuid.UUID) *AppUserControlDeleteOne {
	builder := c.Delete().Where(appusercontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppUserControlDeleteOne{builder}
}

// Query returns a query builder for AppUserControl.
func (c *AppUserControlClient) Query() *AppUserControlQuery {
	return &AppUserControlQuery{
		config: c.config,
	}
}

// Get returns a AppUserControl entity by its id.
func (c *AppUserControlClient) Get(ctx context.Context, id uuid.UUID) (*AppUserControl, error) {
	return c.Query().Where(appusercontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppUserControlClient) GetX(ctx context.Context, id uuid.UUID) *AppUserControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppUserControlClient) Hooks() []Hook {
	hooks := c.hooks.AppUserControl
	return append(hooks[:len(hooks):len(hooks)], appusercontrol.Hooks[:]...)
}

// AppUserExtraClient is a client for the AppUserExtra schema.
type AppUserExtraClient struct {
	config
}

// NewAppUserExtraClient returns a client for the AppUserExtra from the given config.
func NewAppUserExtraClient(c config) *AppUserExtraClient {
	return &AppUserExtraClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appuserextra.Hooks(f(g(h())))`.
func (c *AppUserExtraClient) Use(hooks ...Hook) {
	c.hooks.AppUserExtra = append(c.hooks.AppUserExtra, hooks...)
}

// Create returns a create builder for AppUserExtra.
func (c *AppUserExtraClient) Create() *AppUserExtraCreate {
	mutation := newAppUserExtraMutation(c.config, OpCreate)
	return &AppUserExtraCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppUserExtra entities.
func (c *AppUserExtraClient) CreateBulk(builders ...*AppUserExtraCreate) *AppUserExtraCreateBulk {
	return &AppUserExtraCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppUserExtra.
func (c *AppUserExtraClient) Update() *AppUserExtraUpdate {
	mutation := newAppUserExtraMutation(c.config, OpUpdate)
	return &AppUserExtraUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppUserExtraClient) UpdateOne(aue *AppUserExtra) *AppUserExtraUpdateOne {
	mutation := newAppUserExtraMutation(c.config, OpUpdateOne, withAppUserExtra(aue))
	return &AppUserExtraUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppUserExtraClient) UpdateOneID(id uuid.UUID) *AppUserExtraUpdateOne {
	mutation := newAppUserExtraMutation(c.config, OpUpdateOne, withAppUserExtraID(id))
	return &AppUserExtraUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppUserExtra.
func (c *AppUserExtraClient) Delete() *AppUserExtraDelete {
	mutation := newAppUserExtraMutation(c.config, OpDelete)
	return &AppUserExtraDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppUserExtraClient) DeleteOne(aue *AppUserExtra) *AppUserExtraDeleteOne {
	return c.DeleteOneID(aue.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppUserExtraClient) DeleteOneID(id uuid.UUID) *AppUserExtraDeleteOne {
	builder := c.Delete().Where(appuserextra.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppUserExtraDeleteOne{builder}
}

// Query returns a query builder for AppUserExtra.
func (c *AppUserExtraClient) Query() *AppUserExtraQuery {
	return &AppUserExtraQuery{
		config: c.config,
	}
}

// Get returns a AppUserExtra entity by its id.
func (c *AppUserExtraClient) Get(ctx context.Context, id uuid.UUID) (*AppUserExtra, error) {
	return c.Query().Where(appuserextra.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppUserExtraClient) GetX(ctx context.Context, id uuid.UUID) *AppUserExtra {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppUserExtraClient) Hooks() []Hook {
	hooks := c.hooks.AppUserExtra
	return append(hooks[:len(hooks):len(hooks)], appuserextra.Hooks[:]...)
}

// AppUserSecretClient is a client for the AppUserSecret schema.
type AppUserSecretClient struct {
	config
}

// NewAppUserSecretClient returns a client for the AppUserSecret from the given config.
func NewAppUserSecretClient(c config) *AppUserSecretClient {
	return &AppUserSecretClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appusersecret.Hooks(f(g(h())))`.
func (c *AppUserSecretClient) Use(hooks ...Hook) {
	c.hooks.AppUserSecret = append(c.hooks.AppUserSecret, hooks...)
}

// Create returns a create builder for AppUserSecret.
func (c *AppUserSecretClient) Create() *AppUserSecretCreate {
	mutation := newAppUserSecretMutation(c.config, OpCreate)
	return &AppUserSecretCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppUserSecret entities.
func (c *AppUserSecretClient) CreateBulk(builders ...*AppUserSecretCreate) *AppUserSecretCreateBulk {
	return &AppUserSecretCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppUserSecret.
func (c *AppUserSecretClient) Update() *AppUserSecretUpdate {
	mutation := newAppUserSecretMutation(c.config, OpUpdate)
	return &AppUserSecretUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppUserSecretClient) UpdateOne(aus *AppUserSecret) *AppUserSecretUpdateOne {
	mutation := newAppUserSecretMutation(c.config, OpUpdateOne, withAppUserSecret(aus))
	return &AppUserSecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppUserSecretClient) UpdateOneID(id uuid.UUID) *AppUserSecretUpdateOne {
	mutation := newAppUserSecretMutation(c.config, OpUpdateOne, withAppUserSecretID(id))
	return &AppUserSecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppUserSecret.
func (c *AppUserSecretClient) Delete() *AppUserSecretDelete {
	mutation := newAppUserSecretMutation(c.config, OpDelete)
	return &AppUserSecretDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppUserSecretClient) DeleteOne(aus *AppUserSecret) *AppUserSecretDeleteOne {
	return c.DeleteOneID(aus.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppUserSecretClient) DeleteOneID(id uuid.UUID) *AppUserSecretDeleteOne {
	builder := c.Delete().Where(appusersecret.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppUserSecretDeleteOne{builder}
}

// Query returns a query builder for AppUserSecret.
func (c *AppUserSecretClient) Query() *AppUserSecretQuery {
	return &AppUserSecretQuery{
		config: c.config,
	}
}

// Get returns a AppUserSecret entity by its id.
func (c *AppUserSecretClient) Get(ctx context.Context, id uuid.UUID) (*AppUserSecret, error) {
	return c.Query().Where(appusersecret.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppUserSecretClient) GetX(ctx context.Context, id uuid.UUID) *AppUserSecret {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppUserSecretClient) Hooks() []Hook {
	hooks := c.hooks.AppUserSecret
	return append(hooks[:len(hooks):len(hooks)], appusersecret.Hooks[:]...)
}

// AppUserThirdPartyClient is a client for the AppUserThirdParty schema.
type AppUserThirdPartyClient struct {
	config
}

// NewAppUserThirdPartyClient returns a client for the AppUserThirdParty from the given config.
func NewAppUserThirdPartyClient(c config) *AppUserThirdPartyClient {
	return &AppUserThirdPartyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appuserthirdparty.Hooks(f(g(h())))`.
func (c *AppUserThirdPartyClient) Use(hooks ...Hook) {
	c.hooks.AppUserThirdParty = append(c.hooks.AppUserThirdParty, hooks...)
}

// Create returns a create builder for AppUserThirdParty.
func (c *AppUserThirdPartyClient) Create() *AppUserThirdPartyCreate {
	mutation := newAppUserThirdPartyMutation(c.config, OpCreate)
	return &AppUserThirdPartyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppUserThirdParty entities.
func (c *AppUserThirdPartyClient) CreateBulk(builders ...*AppUserThirdPartyCreate) *AppUserThirdPartyCreateBulk {
	return &AppUserThirdPartyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppUserThirdParty.
func (c *AppUserThirdPartyClient) Update() *AppUserThirdPartyUpdate {
	mutation := newAppUserThirdPartyMutation(c.config, OpUpdate)
	return &AppUserThirdPartyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppUserThirdPartyClient) UpdateOne(autp *AppUserThirdParty) *AppUserThirdPartyUpdateOne {
	mutation := newAppUserThirdPartyMutation(c.config, OpUpdateOne, withAppUserThirdParty(autp))
	return &AppUserThirdPartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppUserThirdPartyClient) UpdateOneID(id uuid.UUID) *AppUserThirdPartyUpdateOne {
	mutation := newAppUserThirdPartyMutation(c.config, OpUpdateOne, withAppUserThirdPartyID(id))
	return &AppUserThirdPartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppUserThirdParty.
func (c *AppUserThirdPartyClient) Delete() *AppUserThirdPartyDelete {
	mutation := newAppUserThirdPartyMutation(c.config, OpDelete)
	return &AppUserThirdPartyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppUserThirdPartyClient) DeleteOne(autp *AppUserThirdParty) *AppUserThirdPartyDeleteOne {
	return c.DeleteOneID(autp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppUserThirdPartyClient) DeleteOneID(id uuid.UUID) *AppUserThirdPartyDeleteOne {
	builder := c.Delete().Where(appuserthirdparty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppUserThirdPartyDeleteOne{builder}
}

// Query returns a query builder for AppUserThirdParty.
func (c *AppUserThirdPartyClient) Query() *AppUserThirdPartyQuery {
	return &AppUserThirdPartyQuery{
		config: c.config,
	}
}

// Get returns a AppUserThirdParty entity by its id.
func (c *AppUserThirdPartyClient) Get(ctx context.Context, id uuid.UUID) (*AppUserThirdParty, error) {
	return c.Query().Where(appuserthirdparty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppUserThirdPartyClient) GetX(ctx context.Context, id uuid.UUID) *AppUserThirdParty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppUserThirdPartyClient) Hooks() []Hook {
	hooks := c.hooks.AppUserThirdParty
	return append(hooks[:len(hooks):len(hooks)], appuserthirdparty.Hooks[:]...)
}

// BanAppClient is a client for the BanApp schema.
type BanAppClient struct {
	config
}

// NewBanAppClient returns a client for the BanApp from the given config.
func NewBanAppClient(c config) *BanAppClient {
	return &BanAppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banapp.Hooks(f(g(h())))`.
func (c *BanAppClient) Use(hooks ...Hook) {
	c.hooks.BanApp = append(c.hooks.BanApp, hooks...)
}

// Create returns a create builder for BanApp.
func (c *BanAppClient) Create() *BanAppCreate {
	mutation := newBanAppMutation(c.config, OpCreate)
	return &BanAppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BanApp entities.
func (c *BanAppClient) CreateBulk(builders ...*BanAppCreate) *BanAppCreateBulk {
	return &BanAppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BanApp.
func (c *BanAppClient) Update() *BanAppUpdate {
	mutation := newBanAppMutation(c.config, OpUpdate)
	return &BanAppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BanAppClient) UpdateOne(ba *BanApp) *BanAppUpdateOne {
	mutation := newBanAppMutation(c.config, OpUpdateOne, withBanApp(ba))
	return &BanAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BanAppClient) UpdateOneID(id uuid.UUID) *BanAppUpdateOne {
	mutation := newBanAppMutation(c.config, OpUpdateOne, withBanAppID(id))
	return &BanAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BanApp.
func (c *BanAppClient) Delete() *BanAppDelete {
	mutation := newBanAppMutation(c.config, OpDelete)
	return &BanAppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BanAppClient) DeleteOne(ba *BanApp) *BanAppDeleteOne {
	return c.DeleteOneID(ba.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BanAppClient) DeleteOneID(id uuid.UUID) *BanAppDeleteOne {
	builder := c.Delete().Where(banapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BanAppDeleteOne{builder}
}

// Query returns a query builder for BanApp.
func (c *BanAppClient) Query() *BanAppQuery {
	return &BanAppQuery{
		config: c.config,
	}
}

// Get returns a BanApp entity by its id.
func (c *BanAppClient) Get(ctx context.Context, id uuid.UUID) (*BanApp, error) {
	return c.Query().Where(banapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BanAppClient) GetX(ctx context.Context, id uuid.UUID) *BanApp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BanAppClient) Hooks() []Hook {
	hooks := c.hooks.BanApp
	return append(hooks[:len(hooks):len(hooks)], banapp.Hooks[:]...)
}

// BanAppUserClient is a client for the BanAppUser schema.
type BanAppUserClient struct {
	config
}

// NewBanAppUserClient returns a client for the BanAppUser from the given config.
func NewBanAppUserClient(c config) *BanAppUserClient {
	return &BanAppUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banappuser.Hooks(f(g(h())))`.
func (c *BanAppUserClient) Use(hooks ...Hook) {
	c.hooks.BanAppUser = append(c.hooks.BanAppUser, hooks...)
}

// Create returns a create builder for BanAppUser.
func (c *BanAppUserClient) Create() *BanAppUserCreate {
	mutation := newBanAppUserMutation(c.config, OpCreate)
	return &BanAppUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BanAppUser entities.
func (c *BanAppUserClient) CreateBulk(builders ...*BanAppUserCreate) *BanAppUserCreateBulk {
	return &BanAppUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BanAppUser.
func (c *BanAppUserClient) Update() *BanAppUserUpdate {
	mutation := newBanAppUserMutation(c.config, OpUpdate)
	return &BanAppUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BanAppUserClient) UpdateOne(bau *BanAppUser) *BanAppUserUpdateOne {
	mutation := newBanAppUserMutation(c.config, OpUpdateOne, withBanAppUser(bau))
	return &BanAppUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BanAppUserClient) UpdateOneID(id uuid.UUID) *BanAppUserUpdateOne {
	mutation := newBanAppUserMutation(c.config, OpUpdateOne, withBanAppUserID(id))
	return &BanAppUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BanAppUser.
func (c *BanAppUserClient) Delete() *BanAppUserDelete {
	mutation := newBanAppUserMutation(c.config, OpDelete)
	return &BanAppUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BanAppUserClient) DeleteOne(bau *BanAppUser) *BanAppUserDeleteOne {
	return c.DeleteOneID(bau.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BanAppUserClient) DeleteOneID(id uuid.UUID) *BanAppUserDeleteOne {
	builder := c.Delete().Where(banappuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BanAppUserDeleteOne{builder}
}

// Query returns a query builder for BanAppUser.
func (c *BanAppUserClient) Query() *BanAppUserQuery {
	return &BanAppUserQuery{
		config: c.config,
	}
}

// Get returns a BanAppUser entity by its id.
func (c *BanAppUserClient) Get(ctx context.Context, id uuid.UUID) (*BanAppUser, error) {
	return c.Query().Where(banappuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BanAppUserClient) GetX(ctx context.Context, id uuid.UUID) *BanAppUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BanAppUserClient) Hooks() []Hook {
	hooks := c.hooks.BanAppUser
	return append(hooks[:len(hooks):len(hooks)], banappuser.Hooks[:]...)
}
