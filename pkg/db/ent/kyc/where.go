// Code generated by ent, DO NOT EDIT.

package kyc

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// DocumentType applies equality check predicate on the "document_type" field. It's identical to DocumentTypeEQ.
func DocumentType(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentType), v))
	})
}

// IDNumber applies equality check predicate on the "id_number" field. It's identical to IDNumberEQ.
func IDNumber(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDNumber), v))
	})
}

// FrontImg applies equality check predicate on the "front_img" field. It's identical to FrontImgEQ.
func FrontImg(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrontImg), v))
	})
}

// BackImg applies equality check predicate on the "back_img" field. It's identical to BackImgEQ.
func BackImg(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackImg), v))
	})
}

// SelfieImg applies equality check predicate on the "selfie_img" field. It's identical to SelfieImgEQ.
func SelfieImg(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfieImg), v))
	})
}

// EntityType applies equality check predicate on the "entity_type" field. It's identical to EntityTypeEQ.
func EntityType(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityType), v))
	})
}

// ReviewID applies equality check predicate on the "review_id" field. It's identical to ReviewIDEQ.
func ReviewID(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewID), v))
	})
}

// ReviewState applies equality check predicate on the "review_state" field. It's identical to ReviewStateEQ.
func ReviewState(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewState), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// DocumentTypeEQ applies the EQ predicate on the "document_type" field.
func DocumentTypeEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeNEQ applies the NEQ predicate on the "document_type" field.
func DocumentTypeNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeIn applies the In predicate on the "document_type" field.
func DocumentTypeIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDocumentType), v...))
	})
}

// DocumentTypeNotIn applies the NotIn predicate on the "document_type" field.
func DocumentTypeNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDocumentType), v...))
	})
}

// DocumentTypeGT applies the GT predicate on the "document_type" field.
func DocumentTypeGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeGTE applies the GTE predicate on the "document_type" field.
func DocumentTypeGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeLT applies the LT predicate on the "document_type" field.
func DocumentTypeLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeLTE applies the LTE predicate on the "document_type" field.
func DocumentTypeLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeContains applies the Contains predicate on the "document_type" field.
func DocumentTypeContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeHasPrefix applies the HasPrefix predicate on the "document_type" field.
func DocumentTypeHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeHasSuffix applies the HasSuffix predicate on the "document_type" field.
func DocumentTypeHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeIsNil applies the IsNil predicate on the "document_type" field.
func DocumentTypeIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDocumentType)))
	})
}

// DocumentTypeNotNil applies the NotNil predicate on the "document_type" field.
func DocumentTypeNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDocumentType)))
	})
}

// DocumentTypeEqualFold applies the EqualFold predicate on the "document_type" field.
func DocumentTypeEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDocumentType), v))
	})
}

// DocumentTypeContainsFold applies the ContainsFold predicate on the "document_type" field.
func DocumentTypeContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDocumentType), v))
	})
}

// IDNumberEQ applies the EQ predicate on the "id_number" field.
func IDNumberEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDNumber), v))
	})
}

// IDNumberNEQ applies the NEQ predicate on the "id_number" field.
func IDNumberNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIDNumber), v))
	})
}

// IDNumberIn applies the In predicate on the "id_number" field.
func IDNumberIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIDNumber), v...))
	})
}

// IDNumberNotIn applies the NotIn predicate on the "id_number" field.
func IDNumberNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIDNumber), v...))
	})
}

// IDNumberGT applies the GT predicate on the "id_number" field.
func IDNumberGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIDNumber), v))
	})
}

// IDNumberGTE applies the GTE predicate on the "id_number" field.
func IDNumberGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIDNumber), v))
	})
}

// IDNumberLT applies the LT predicate on the "id_number" field.
func IDNumberLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIDNumber), v))
	})
}

// IDNumberLTE applies the LTE predicate on the "id_number" field.
func IDNumberLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIDNumber), v))
	})
}

// IDNumberContains applies the Contains predicate on the "id_number" field.
func IDNumberContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIDNumber), v))
	})
}

// IDNumberHasPrefix applies the HasPrefix predicate on the "id_number" field.
func IDNumberHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIDNumber), v))
	})
}

// IDNumberHasSuffix applies the HasSuffix predicate on the "id_number" field.
func IDNumberHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIDNumber), v))
	})
}

// IDNumberIsNil applies the IsNil predicate on the "id_number" field.
func IDNumberIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIDNumber)))
	})
}

// IDNumberNotNil applies the NotNil predicate on the "id_number" field.
func IDNumberNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIDNumber)))
	})
}

// IDNumberEqualFold applies the EqualFold predicate on the "id_number" field.
func IDNumberEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIDNumber), v))
	})
}

// IDNumberContainsFold applies the ContainsFold predicate on the "id_number" field.
func IDNumberContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIDNumber), v))
	})
}

// FrontImgEQ applies the EQ predicate on the "front_img" field.
func FrontImgEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrontImg), v))
	})
}

// FrontImgNEQ applies the NEQ predicate on the "front_img" field.
func FrontImgNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrontImg), v))
	})
}

// FrontImgIn applies the In predicate on the "front_img" field.
func FrontImgIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFrontImg), v...))
	})
}

// FrontImgNotIn applies the NotIn predicate on the "front_img" field.
func FrontImgNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFrontImg), v...))
	})
}

// FrontImgGT applies the GT predicate on the "front_img" field.
func FrontImgGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrontImg), v))
	})
}

// FrontImgGTE applies the GTE predicate on the "front_img" field.
func FrontImgGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrontImg), v))
	})
}

// FrontImgLT applies the LT predicate on the "front_img" field.
func FrontImgLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrontImg), v))
	})
}

// FrontImgLTE applies the LTE predicate on the "front_img" field.
func FrontImgLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrontImg), v))
	})
}

// FrontImgContains applies the Contains predicate on the "front_img" field.
func FrontImgContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFrontImg), v))
	})
}

// FrontImgHasPrefix applies the HasPrefix predicate on the "front_img" field.
func FrontImgHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFrontImg), v))
	})
}

// FrontImgHasSuffix applies the HasSuffix predicate on the "front_img" field.
func FrontImgHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFrontImg), v))
	})
}

// FrontImgIsNil applies the IsNil predicate on the "front_img" field.
func FrontImgIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFrontImg)))
	})
}

// FrontImgNotNil applies the NotNil predicate on the "front_img" field.
func FrontImgNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFrontImg)))
	})
}

// FrontImgEqualFold applies the EqualFold predicate on the "front_img" field.
func FrontImgEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFrontImg), v))
	})
}

// FrontImgContainsFold applies the ContainsFold predicate on the "front_img" field.
func FrontImgContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFrontImg), v))
	})
}

// BackImgEQ applies the EQ predicate on the "back_img" field.
func BackImgEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackImg), v))
	})
}

// BackImgNEQ applies the NEQ predicate on the "back_img" field.
func BackImgNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBackImg), v))
	})
}

// BackImgIn applies the In predicate on the "back_img" field.
func BackImgIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBackImg), v...))
	})
}

// BackImgNotIn applies the NotIn predicate on the "back_img" field.
func BackImgNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBackImg), v...))
	})
}

// BackImgGT applies the GT predicate on the "back_img" field.
func BackImgGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBackImg), v))
	})
}

// BackImgGTE applies the GTE predicate on the "back_img" field.
func BackImgGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBackImg), v))
	})
}

// BackImgLT applies the LT predicate on the "back_img" field.
func BackImgLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBackImg), v))
	})
}

// BackImgLTE applies the LTE predicate on the "back_img" field.
func BackImgLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBackImg), v))
	})
}

// BackImgContains applies the Contains predicate on the "back_img" field.
func BackImgContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBackImg), v))
	})
}

// BackImgHasPrefix applies the HasPrefix predicate on the "back_img" field.
func BackImgHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBackImg), v))
	})
}

// BackImgHasSuffix applies the HasSuffix predicate on the "back_img" field.
func BackImgHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBackImg), v))
	})
}

// BackImgIsNil applies the IsNil predicate on the "back_img" field.
func BackImgIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBackImg)))
	})
}

// BackImgNotNil applies the NotNil predicate on the "back_img" field.
func BackImgNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBackImg)))
	})
}

// BackImgEqualFold applies the EqualFold predicate on the "back_img" field.
func BackImgEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBackImg), v))
	})
}

// BackImgContainsFold applies the ContainsFold predicate on the "back_img" field.
func BackImgContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBackImg), v))
	})
}

// SelfieImgEQ applies the EQ predicate on the "selfie_img" field.
func SelfieImgEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgNEQ applies the NEQ predicate on the "selfie_img" field.
func SelfieImgNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgIn applies the In predicate on the "selfie_img" field.
func SelfieImgIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSelfieImg), v...))
	})
}

// SelfieImgNotIn applies the NotIn predicate on the "selfie_img" field.
func SelfieImgNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSelfieImg), v...))
	})
}

// SelfieImgGT applies the GT predicate on the "selfie_img" field.
func SelfieImgGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgGTE applies the GTE predicate on the "selfie_img" field.
func SelfieImgGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgLT applies the LT predicate on the "selfie_img" field.
func SelfieImgLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgLTE applies the LTE predicate on the "selfie_img" field.
func SelfieImgLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgContains applies the Contains predicate on the "selfie_img" field.
func SelfieImgContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgHasPrefix applies the HasPrefix predicate on the "selfie_img" field.
func SelfieImgHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgHasSuffix applies the HasSuffix predicate on the "selfie_img" field.
func SelfieImgHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgIsNil applies the IsNil predicate on the "selfie_img" field.
func SelfieImgIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSelfieImg)))
	})
}

// SelfieImgNotNil applies the NotNil predicate on the "selfie_img" field.
func SelfieImgNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSelfieImg)))
	})
}

// SelfieImgEqualFold applies the EqualFold predicate on the "selfie_img" field.
func SelfieImgEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSelfieImg), v))
	})
}

// SelfieImgContainsFold applies the ContainsFold predicate on the "selfie_img" field.
func SelfieImgContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSelfieImg), v))
	})
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityType), v))
	})
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntityType), v))
	})
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntityType), v...))
	})
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntityType), v...))
	})
}

// EntityTypeGT applies the GT predicate on the "entity_type" field.
func EntityTypeGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntityType), v))
	})
}

// EntityTypeGTE applies the GTE predicate on the "entity_type" field.
func EntityTypeGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntityType), v))
	})
}

// EntityTypeLT applies the LT predicate on the "entity_type" field.
func EntityTypeLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntityType), v))
	})
}

// EntityTypeLTE applies the LTE predicate on the "entity_type" field.
func EntityTypeLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntityType), v))
	})
}

// EntityTypeContains applies the Contains predicate on the "entity_type" field.
func EntityTypeContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEntityType), v))
	})
}

// EntityTypeHasPrefix applies the HasPrefix predicate on the "entity_type" field.
func EntityTypeHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEntityType), v))
	})
}

// EntityTypeHasSuffix applies the HasSuffix predicate on the "entity_type" field.
func EntityTypeHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEntityType), v))
	})
}

// EntityTypeIsNil applies the IsNil predicate on the "entity_type" field.
func EntityTypeIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEntityType)))
	})
}

// EntityTypeNotNil applies the NotNil predicate on the "entity_type" field.
func EntityTypeNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEntityType)))
	})
}

// EntityTypeEqualFold applies the EqualFold predicate on the "entity_type" field.
func EntityTypeEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEntityType), v))
	})
}

// EntityTypeContainsFold applies the ContainsFold predicate on the "entity_type" field.
func EntityTypeContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEntityType), v))
	})
}

// ReviewIDEQ applies the EQ predicate on the "review_id" field.
func ReviewIDEQ(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewID), v))
	})
}

// ReviewIDNEQ applies the NEQ predicate on the "review_id" field.
func ReviewIDNEQ(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewID), v))
	})
}

// ReviewIDIn applies the In predicate on the "review_id" field.
func ReviewIDIn(vs ...uuid.UUID) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReviewID), v...))
	})
}

// ReviewIDNotIn applies the NotIn predicate on the "review_id" field.
func ReviewIDNotIn(vs ...uuid.UUID) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReviewID), v...))
	})
}

// ReviewIDGT applies the GT predicate on the "review_id" field.
func ReviewIDGT(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewID), v))
	})
}

// ReviewIDGTE applies the GTE predicate on the "review_id" field.
func ReviewIDGTE(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewID), v))
	})
}

// ReviewIDLT applies the LT predicate on the "review_id" field.
func ReviewIDLT(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewID), v))
	})
}

// ReviewIDLTE applies the LTE predicate on the "review_id" field.
func ReviewIDLTE(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewID), v))
	})
}

// ReviewIDIsNil applies the IsNil predicate on the "review_id" field.
func ReviewIDIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReviewID)))
	})
}

// ReviewIDNotNil applies the NotNil predicate on the "review_id" field.
func ReviewIDNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReviewID)))
	})
}

// ReviewStateEQ applies the EQ predicate on the "review_state" field.
func ReviewStateEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewState), v))
	})
}

// ReviewStateNEQ applies the NEQ predicate on the "review_state" field.
func ReviewStateNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewState), v))
	})
}

// ReviewStateIn applies the In predicate on the "review_state" field.
func ReviewStateIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReviewState), v...))
	})
}

// ReviewStateNotIn applies the NotIn predicate on the "review_state" field.
func ReviewStateNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReviewState), v...))
	})
}

// ReviewStateGT applies the GT predicate on the "review_state" field.
func ReviewStateGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewState), v))
	})
}

// ReviewStateGTE applies the GTE predicate on the "review_state" field.
func ReviewStateGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewState), v))
	})
}

// ReviewStateLT applies the LT predicate on the "review_state" field.
func ReviewStateLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewState), v))
	})
}

// ReviewStateLTE applies the LTE predicate on the "review_state" field.
func ReviewStateLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewState), v))
	})
}

// ReviewStateContains applies the Contains predicate on the "review_state" field.
func ReviewStateContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReviewState), v))
	})
}

// ReviewStateHasPrefix applies the HasPrefix predicate on the "review_state" field.
func ReviewStateHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReviewState), v))
	})
}

// ReviewStateHasSuffix applies the HasSuffix predicate on the "review_state" field.
func ReviewStateHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReviewState), v))
	})
}

// ReviewStateIsNil applies the IsNil predicate on the "review_state" field.
func ReviewStateIsNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReviewState)))
	})
}

// ReviewStateNotNil applies the NotNil predicate on the "review_state" field.
func ReviewStateNotNil() predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReviewState)))
	})
}

// ReviewStateEqualFold applies the EqualFold predicate on the "review_state" field.
func ReviewStateEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReviewState), v))
	})
}

// ReviewStateContainsFold applies the ContainsFold predicate on the "review_state" field.
func ReviewStateContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReviewState), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Kyc) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Kyc) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Kyc) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		p(s.Not())
	})
}
