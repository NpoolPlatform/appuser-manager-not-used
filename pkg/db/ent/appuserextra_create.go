// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuserextra"
	"github.com/google/uuid"
)

// AppUserExtraCreate is the builder for creating a AppUserExtra entity.
type AppUserExtraCreate struct {
	config
	mutation *AppUserExtraMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (auec *AppUserExtraCreate) SetCreatedAt(u uint32) *AppUserExtraCreate {
	auec.mutation.SetCreatedAt(u)
	return auec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableCreatedAt(u *uint32) *AppUserExtraCreate {
	if u != nil {
		auec.SetCreatedAt(*u)
	}
	return auec
}

// SetUpdatedAt sets the "updated_at" field.
func (auec *AppUserExtraCreate) SetUpdatedAt(u uint32) *AppUserExtraCreate {
	auec.mutation.SetUpdatedAt(u)
	return auec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableUpdatedAt(u *uint32) *AppUserExtraCreate {
	if u != nil {
		auec.SetUpdatedAt(*u)
	}
	return auec
}

// SetDeletedAt sets the "deleted_at" field.
func (auec *AppUserExtraCreate) SetDeletedAt(u uint32) *AppUserExtraCreate {
	auec.mutation.SetDeletedAt(u)
	return auec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableDeletedAt(u *uint32) *AppUserExtraCreate {
	if u != nil {
		auec.SetDeletedAt(*u)
	}
	return auec
}

// SetAppID sets the "app_id" field.
func (auec *AppUserExtraCreate) SetAppID(u uuid.UUID) *AppUserExtraCreate {
	auec.mutation.SetAppID(u)
	return auec
}

// SetUserID sets the "user_id" field.
func (auec *AppUserExtraCreate) SetUserID(u uuid.UUID) *AppUserExtraCreate {
	auec.mutation.SetUserID(u)
	return auec
}

// SetUsername sets the "username" field.
func (auec *AppUserExtraCreate) SetUsername(s string) *AppUserExtraCreate {
	auec.mutation.SetUsername(s)
	return auec
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableUsername(s *string) *AppUserExtraCreate {
	if s != nil {
		auec.SetUsername(*s)
	}
	return auec
}

// SetFirstName sets the "first_name" field.
func (auec *AppUserExtraCreate) SetFirstName(s string) *AppUserExtraCreate {
	auec.mutation.SetFirstName(s)
	return auec
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableFirstName(s *string) *AppUserExtraCreate {
	if s != nil {
		auec.SetFirstName(*s)
	}
	return auec
}

// SetLastName sets the "last_name" field.
func (auec *AppUserExtraCreate) SetLastName(s string) *AppUserExtraCreate {
	auec.mutation.SetLastName(s)
	return auec
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableLastName(s *string) *AppUserExtraCreate {
	if s != nil {
		auec.SetLastName(*s)
	}
	return auec
}

// SetAddressFields sets the "address_fields" field.
func (auec *AppUserExtraCreate) SetAddressFields(s []string) *AppUserExtraCreate {
	auec.mutation.SetAddressFields(s)
	return auec
}

// SetGender sets the "gender" field.
func (auec *AppUserExtraCreate) SetGender(s string) *AppUserExtraCreate {
	auec.mutation.SetGender(s)
	return auec
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableGender(s *string) *AppUserExtraCreate {
	if s != nil {
		auec.SetGender(*s)
	}
	return auec
}

// SetPostalCode sets the "postal_code" field.
func (auec *AppUserExtraCreate) SetPostalCode(s string) *AppUserExtraCreate {
	auec.mutation.SetPostalCode(s)
	return auec
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillablePostalCode(s *string) *AppUserExtraCreate {
	if s != nil {
		auec.SetPostalCode(*s)
	}
	return auec
}

// SetAge sets the "age" field.
func (auec *AppUserExtraCreate) SetAge(u uint32) *AppUserExtraCreate {
	auec.mutation.SetAge(u)
	return auec
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableAge(u *uint32) *AppUserExtraCreate {
	if u != nil {
		auec.SetAge(*u)
	}
	return auec
}

// SetBirthday sets the "birthday" field.
func (auec *AppUserExtraCreate) SetBirthday(u uint32) *AppUserExtraCreate {
	auec.mutation.SetBirthday(u)
	return auec
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableBirthday(u *uint32) *AppUserExtraCreate {
	if u != nil {
		auec.SetBirthday(*u)
	}
	return auec
}

// SetAvatar sets the "avatar" field.
func (auec *AppUserExtraCreate) SetAvatar(s string) *AppUserExtraCreate {
	auec.mutation.SetAvatar(s)
	return auec
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableAvatar(s *string) *AppUserExtraCreate {
	if s != nil {
		auec.SetAvatar(*s)
	}
	return auec
}

// SetOrganization sets the "organization" field.
func (auec *AppUserExtraCreate) SetOrganization(s string) *AppUserExtraCreate {
	auec.mutation.SetOrganization(s)
	return auec
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableOrganization(s *string) *AppUserExtraCreate {
	if s != nil {
		auec.SetOrganization(*s)
	}
	return auec
}

// SetIDNumber sets the "id_number" field.
func (auec *AppUserExtraCreate) SetIDNumber(s string) *AppUserExtraCreate {
	auec.mutation.SetIDNumber(s)
	return auec
}

// SetNillableIDNumber sets the "id_number" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableIDNumber(s *string) *AppUserExtraCreate {
	if s != nil {
		auec.SetIDNumber(*s)
	}
	return auec
}

// SetID sets the "id" field.
func (auec *AppUserExtraCreate) SetID(u uuid.UUID) *AppUserExtraCreate {
	auec.mutation.SetID(u)
	return auec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (auec *AppUserExtraCreate) SetNillableID(u *uuid.UUID) *AppUserExtraCreate {
	if u != nil {
		auec.SetID(*u)
	}
	return auec
}

// Mutation returns the AppUserExtraMutation object of the builder.
func (auec *AppUserExtraCreate) Mutation() *AppUserExtraMutation {
	return auec.mutation
}

// Save creates the AppUserExtra in the database.
func (auec *AppUserExtraCreate) Save(ctx context.Context) (*AppUserExtra, error) {
	var (
		err  error
		node *AppUserExtra
	)
	if err := auec.defaults(); err != nil {
		return nil, err
	}
	if len(auec.hooks) == 0 {
		if err = auec.check(); err != nil {
			return nil, err
		}
		node, err = auec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserExtraMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auec.check(); err != nil {
				return nil, err
			}
			auec.mutation = mutation
			if node, err = auec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(auec.hooks) - 1; i >= 0; i-- {
			if auec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (auec *AppUserExtraCreate) SaveX(ctx context.Context) *AppUserExtra {
	v, err := auec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auec *AppUserExtraCreate) Exec(ctx context.Context) error {
	_, err := auec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auec *AppUserExtraCreate) ExecX(ctx context.Context) {
	if err := auec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auec *AppUserExtraCreate) defaults() error {
	if _, ok := auec.mutation.CreatedAt(); !ok {
		if appuserextra.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appuserextra.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appuserextra.DefaultCreatedAt()
		auec.mutation.SetCreatedAt(v)
	}
	if _, ok := auec.mutation.UpdatedAt(); !ok {
		if appuserextra.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appuserextra.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appuserextra.DefaultUpdatedAt()
		auec.mutation.SetUpdatedAt(v)
	}
	if _, ok := auec.mutation.DeletedAt(); !ok {
		if appuserextra.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized appuserextra.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := appuserextra.DefaultDeletedAt()
		auec.mutation.SetDeletedAt(v)
	}
	if _, ok := auec.mutation.Username(); !ok {
		v := appuserextra.DefaultUsername
		auec.mutation.SetUsername(v)
	}
	if _, ok := auec.mutation.FirstName(); !ok {
		v := appuserextra.DefaultFirstName
		auec.mutation.SetFirstName(v)
	}
	if _, ok := auec.mutation.LastName(); !ok {
		v := appuserextra.DefaultLastName
		auec.mutation.SetLastName(v)
	}
	if _, ok := auec.mutation.AddressFields(); !ok {
		v := appuserextra.DefaultAddressFields
		auec.mutation.SetAddressFields(v)
	}
	if _, ok := auec.mutation.Gender(); !ok {
		v := appuserextra.DefaultGender
		auec.mutation.SetGender(v)
	}
	if _, ok := auec.mutation.PostalCode(); !ok {
		v := appuserextra.DefaultPostalCode
		auec.mutation.SetPostalCode(v)
	}
	if _, ok := auec.mutation.Age(); !ok {
		v := appuserextra.DefaultAge
		auec.mutation.SetAge(v)
	}
	if _, ok := auec.mutation.Birthday(); !ok {
		v := appuserextra.DefaultBirthday
		auec.mutation.SetBirthday(v)
	}
	if _, ok := auec.mutation.Avatar(); !ok {
		v := appuserextra.DefaultAvatar
		auec.mutation.SetAvatar(v)
	}
	if _, ok := auec.mutation.Organization(); !ok {
		v := appuserextra.DefaultOrganization
		auec.mutation.SetOrganization(v)
	}
	if _, ok := auec.mutation.IDNumber(); !ok {
		v := appuserextra.DefaultIDNumber
		auec.mutation.SetIDNumber(v)
	}
	if _, ok := auec.mutation.ID(); !ok {
		if appuserextra.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized appuserextra.DefaultID (forgotten import ent/runtime?)")
		}
		v := appuserextra.DefaultID()
		auec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auec *AppUserExtraCreate) check() error {
	if _, ok := auec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppUserExtra.created_at"`)}
	}
	if _, ok := auec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppUserExtra.updated_at"`)}
	}
	if _, ok := auec.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "AppUserExtra.deleted_at"`)}
	}
	if _, ok := auec.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppUserExtra.app_id"`)}
	}
	if _, ok := auec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AppUserExtra.user_id"`)}
	}
	if _, ok := auec.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "AppUserExtra.username"`)}
	}
	if _, ok := auec.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "AppUserExtra.first_name"`)}
	}
	if _, ok := auec.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "AppUserExtra.last_name"`)}
	}
	if _, ok := auec.mutation.AddressFields(); !ok {
		return &ValidationError{Name: "address_fields", err: errors.New(`ent: missing required field "AppUserExtra.address_fields"`)}
	}
	if _, ok := auec.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "AppUserExtra.gender"`)}
	}
	if _, ok := auec.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "AppUserExtra.postal_code"`)}
	}
	if _, ok := auec.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "AppUserExtra.age"`)}
	}
	if _, ok := auec.mutation.Birthday(); !ok {
		return &ValidationError{Name: "birthday", err: errors.New(`ent: missing required field "AppUserExtra.birthday"`)}
	}
	if _, ok := auec.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "AppUserExtra.avatar"`)}
	}
	if _, ok := auec.mutation.Organization(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required field "AppUserExtra.organization"`)}
	}
	if _, ok := auec.mutation.IDNumber(); !ok {
		return &ValidationError{Name: "id_number", err: errors.New(`ent: missing required field "AppUserExtra.id_number"`)}
	}
	return nil
}

func (auec *AppUserExtraCreate) sqlSave(ctx context.Context) (*AppUserExtra, error) {
	_node, _spec := auec.createSpec()
	if err := sqlgraph.CreateNode(ctx, auec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (auec *AppUserExtraCreate) createSpec() (*AppUserExtra, *sqlgraph.CreateSpec) {
	var (
		_node = &AppUserExtra{config: auec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appuserextra.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserextra.FieldID,
			},
		}
	)
	_spec.OnConflict = auec.conflict
	if id, ok := auec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := auec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserextra.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := auec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserextra.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := auec.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserextra.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := auec.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserextra.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := auec.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserextra.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := auec.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserextra.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := auec.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserextra.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := auec.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserextra.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := auec.mutation.AddressFields(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appuserextra.FieldAddressFields,
		})
		_node.AddressFields = value
	}
	if value, ok := auec.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserextra.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := auec.mutation.PostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserextra.FieldPostalCode,
		})
		_node.PostalCode = value
	}
	if value, ok := auec.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserextra.FieldAge,
		})
		_node.Age = value
	}
	if value, ok := auec.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserextra.FieldBirthday,
		})
		_node.Birthday = value
	}
	if value, ok := auec.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserextra.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := auec.mutation.Organization(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserextra.FieldOrganization,
		})
		_node.Organization = value
	}
	if value, ok := auec.mutation.IDNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserextra.FieldIDNumber,
		})
		_node.IDNumber = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserExtra.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserExtraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (auec *AppUserExtraCreate) OnConflict(opts ...sql.ConflictOption) *AppUserExtraUpsertOne {
	auec.conflict = opts
	return &AppUserExtraUpsertOne{
		create: auec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserExtra.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (auec *AppUserExtraCreate) OnConflictColumns(columns ...string) *AppUserExtraUpsertOne {
	auec.conflict = append(auec.conflict, sql.ConflictColumns(columns...))
	return &AppUserExtraUpsertOne{
		create: auec,
	}
}

type (
	// AppUserExtraUpsertOne is the builder for "upsert"-ing
	//  one AppUserExtra node.
	AppUserExtraUpsertOne struct {
		create *AppUserExtraCreate
	}

	// AppUserExtraUpsert is the "OnConflict" setter.
	AppUserExtraUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppUserExtraUpsert) SetCreatedAt(v uint32) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateCreatedAt() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppUserExtraUpsert) AddCreatedAt(v uint32) *AppUserExtraUpsert {
	u.Add(appuserextra.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUserExtraUpsert) SetUpdatedAt(v uint32) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateUpdatedAt() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppUserExtraUpsert) AddUpdatedAt(v uint32) *AppUserExtraUpsert {
	u.Add(appuserextra.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppUserExtraUpsert) SetDeletedAt(v uint32) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateDeletedAt() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppUserExtraUpsert) AddDeletedAt(v uint32) *AppUserExtraUpsert {
	u.Add(appuserextra.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserExtraUpsert) SetAppID(v uuid.UUID) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateAppID() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppUserExtraUpsert) SetUserID(v uuid.UUID) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateUserID() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldUserID)
	return u
}

// SetUsername sets the "username" field.
func (u *AppUserExtraUpsert) SetUsername(v string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateUsername() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldUsername)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *AppUserExtraUpsert) SetFirstName(v string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateFirstName() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *AppUserExtraUpsert) SetLastName(v string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateLastName() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldLastName)
	return u
}

// SetAddressFields sets the "address_fields" field.
func (u *AppUserExtraUpsert) SetAddressFields(v []string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldAddressFields, v)
	return u
}

// UpdateAddressFields sets the "address_fields" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateAddressFields() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldAddressFields)
	return u
}

// SetGender sets the "gender" field.
func (u *AppUserExtraUpsert) SetGender(v string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateGender() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldGender)
	return u
}

// SetPostalCode sets the "postal_code" field.
func (u *AppUserExtraUpsert) SetPostalCode(v string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldPostalCode, v)
	return u
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdatePostalCode() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldPostalCode)
	return u
}

// SetAge sets the "age" field.
func (u *AppUserExtraUpsert) SetAge(v uint32) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldAge, v)
	return u
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateAge() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldAge)
	return u
}

// AddAge adds v to the "age" field.
func (u *AppUserExtraUpsert) AddAge(v uint32) *AppUserExtraUpsert {
	u.Add(appuserextra.FieldAge, v)
	return u
}

// SetBirthday sets the "birthday" field.
func (u *AppUserExtraUpsert) SetBirthday(v uint32) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldBirthday, v)
	return u
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateBirthday() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldBirthday)
	return u
}

// AddBirthday adds v to the "birthday" field.
func (u *AppUserExtraUpsert) AddBirthday(v uint32) *AppUserExtraUpsert {
	u.Add(appuserextra.FieldBirthday, v)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *AppUserExtraUpsert) SetAvatar(v string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateAvatar() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldAvatar)
	return u
}

// SetOrganization sets the "organization" field.
func (u *AppUserExtraUpsert) SetOrganization(v string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldOrganization, v)
	return u
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateOrganization() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldOrganization)
	return u
}

// SetIDNumber sets the "id_number" field.
func (u *AppUserExtraUpsert) SetIDNumber(v string) *AppUserExtraUpsert {
	u.Set(appuserextra.FieldIDNumber, v)
	return u
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *AppUserExtraUpsert) UpdateIDNumber() *AppUserExtraUpsert {
	u.SetExcluded(appuserextra.FieldIDNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppUserExtra.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuserextra.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserExtraUpsertOne) UpdateNewValues() *AppUserExtraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appuserextra.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppUserExtra.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppUserExtraUpsertOne) Ignore() *AppUserExtraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserExtraUpsertOne) DoNothing() *AppUserExtraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserExtraCreate.OnConflict
// documentation for more info.
func (u *AppUserExtraUpsertOne) Update(set func(*AppUserExtraUpsert)) *AppUserExtraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserExtraUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppUserExtraUpsertOne) SetCreatedAt(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppUserExtraUpsertOne) AddCreatedAt(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateCreatedAt() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUserExtraUpsertOne) SetUpdatedAt(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppUserExtraUpsertOne) AddUpdatedAt(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateUpdatedAt() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppUserExtraUpsertOne) SetDeletedAt(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppUserExtraUpsertOne) AddDeletedAt(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateDeletedAt() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserExtraUpsertOne) SetAppID(v uuid.UUID) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateAppID() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserExtraUpsertOne) SetUserID(v uuid.UUID) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateUserID() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *AppUserExtraUpsertOne) SetUsername(v string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateUsername() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateUsername()
	})
}

// SetFirstName sets the "first_name" field.
func (u *AppUserExtraUpsertOne) SetFirstName(v string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateFirstName() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *AppUserExtraUpsertOne) SetLastName(v string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateLastName() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateLastName()
	})
}

// SetAddressFields sets the "address_fields" field.
func (u *AppUserExtraUpsertOne) SetAddressFields(v []string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetAddressFields(v)
	})
}

// UpdateAddressFields sets the "address_fields" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateAddressFields() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateAddressFields()
	})
}

// SetGender sets the "gender" field.
func (u *AppUserExtraUpsertOne) SetGender(v string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateGender() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateGender()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *AppUserExtraUpsertOne) SetPostalCode(v string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdatePostalCode() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdatePostalCode()
	})
}

// SetAge sets the "age" field.
func (u *AppUserExtraUpsertOne) SetAge(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetAge(v)
	})
}

// AddAge adds v to the "age" field.
func (u *AppUserExtraUpsertOne) AddAge(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddAge(v)
	})
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateAge() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateAge()
	})
}

// SetBirthday sets the "birthday" field.
func (u *AppUserExtraUpsertOne) SetBirthday(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetBirthday(v)
	})
}

// AddBirthday adds v to the "birthday" field.
func (u *AppUserExtraUpsertOne) AddBirthday(v uint32) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateBirthday() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateBirthday()
	})
}

// SetAvatar sets the "avatar" field.
func (u *AppUserExtraUpsertOne) SetAvatar(v string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateAvatar() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateAvatar()
	})
}

// SetOrganization sets the "organization" field.
func (u *AppUserExtraUpsertOne) SetOrganization(v string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetOrganization(v)
	})
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateOrganization() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateOrganization()
	})
}

// SetIDNumber sets the "id_number" field.
func (u *AppUserExtraUpsertOne) SetIDNumber(v string) *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetIDNumber(v)
	})
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *AppUserExtraUpsertOne) UpdateIDNumber() *AppUserExtraUpsertOne {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateIDNumber()
	})
}

// Exec executes the query.
func (u *AppUserExtraUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserExtraCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserExtraUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUserExtraUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppUserExtraUpsertOne.ID is not supported by MySQL driver. Use AppUserExtraUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUserExtraUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppUserExtraCreateBulk is the builder for creating many AppUserExtra entities in bulk.
type AppUserExtraCreateBulk struct {
	config
	builders []*AppUserExtraCreate
	conflict []sql.ConflictOption
}

// Save creates the AppUserExtra entities in the database.
func (auecb *AppUserExtraCreateBulk) Save(ctx context.Context) ([]*AppUserExtra, error) {
	specs := make([]*sqlgraph.CreateSpec, len(auecb.builders))
	nodes := make([]*AppUserExtra, len(auecb.builders))
	mutators := make([]Mutator, len(auecb.builders))
	for i := range auecb.builders {
		func(i int, root context.Context) {
			builder := auecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppUserExtraMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, auecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = auecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, auecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, auecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (auecb *AppUserExtraCreateBulk) SaveX(ctx context.Context) []*AppUserExtra {
	v, err := auecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auecb *AppUserExtraCreateBulk) Exec(ctx context.Context) error {
	_, err := auecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auecb *AppUserExtraCreateBulk) ExecX(ctx context.Context) {
	if err := auecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserExtra.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserExtraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (auecb *AppUserExtraCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUserExtraUpsertBulk {
	auecb.conflict = opts
	return &AppUserExtraUpsertBulk{
		create: auecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserExtra.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (auecb *AppUserExtraCreateBulk) OnConflictColumns(columns ...string) *AppUserExtraUpsertBulk {
	auecb.conflict = append(auecb.conflict, sql.ConflictColumns(columns...))
	return &AppUserExtraUpsertBulk{
		create: auecb,
	}
}

// AppUserExtraUpsertBulk is the builder for "upsert"-ing
// a bulk of AppUserExtra nodes.
type AppUserExtraUpsertBulk struct {
	create *AppUserExtraCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppUserExtra.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuserextra.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserExtraUpsertBulk) UpdateNewValues() *AppUserExtraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appuserextra.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppUserExtra.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppUserExtraUpsertBulk) Ignore() *AppUserExtraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserExtraUpsertBulk) DoNothing() *AppUserExtraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserExtraCreateBulk.OnConflict
// documentation for more info.
func (u *AppUserExtraUpsertBulk) Update(set func(*AppUserExtraUpsert)) *AppUserExtraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserExtraUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppUserExtraUpsertBulk) SetCreatedAt(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppUserExtraUpsertBulk) AddCreatedAt(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateCreatedAt() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUserExtraUpsertBulk) SetUpdatedAt(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppUserExtraUpsertBulk) AddUpdatedAt(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateUpdatedAt() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppUserExtraUpsertBulk) SetDeletedAt(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppUserExtraUpsertBulk) AddDeletedAt(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateDeletedAt() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserExtraUpsertBulk) SetAppID(v uuid.UUID) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateAppID() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserExtraUpsertBulk) SetUserID(v uuid.UUID) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateUserID() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *AppUserExtraUpsertBulk) SetUsername(v string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateUsername() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateUsername()
	})
}

// SetFirstName sets the "first_name" field.
func (u *AppUserExtraUpsertBulk) SetFirstName(v string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateFirstName() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *AppUserExtraUpsertBulk) SetLastName(v string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateLastName() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateLastName()
	})
}

// SetAddressFields sets the "address_fields" field.
func (u *AppUserExtraUpsertBulk) SetAddressFields(v []string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetAddressFields(v)
	})
}

// UpdateAddressFields sets the "address_fields" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateAddressFields() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateAddressFields()
	})
}

// SetGender sets the "gender" field.
func (u *AppUserExtraUpsertBulk) SetGender(v string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateGender() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateGender()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *AppUserExtraUpsertBulk) SetPostalCode(v string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdatePostalCode() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdatePostalCode()
	})
}

// SetAge sets the "age" field.
func (u *AppUserExtraUpsertBulk) SetAge(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetAge(v)
	})
}

// AddAge adds v to the "age" field.
func (u *AppUserExtraUpsertBulk) AddAge(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddAge(v)
	})
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateAge() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateAge()
	})
}

// SetBirthday sets the "birthday" field.
func (u *AppUserExtraUpsertBulk) SetBirthday(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetBirthday(v)
	})
}

// AddBirthday adds v to the "birthday" field.
func (u *AppUserExtraUpsertBulk) AddBirthday(v uint32) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.AddBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateBirthday() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateBirthday()
	})
}

// SetAvatar sets the "avatar" field.
func (u *AppUserExtraUpsertBulk) SetAvatar(v string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateAvatar() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateAvatar()
	})
}

// SetOrganization sets the "organization" field.
func (u *AppUserExtraUpsertBulk) SetOrganization(v string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetOrganization(v)
	})
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateOrganization() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateOrganization()
	})
}

// SetIDNumber sets the "id_number" field.
func (u *AppUserExtraUpsertBulk) SetIDNumber(v string) *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.SetIDNumber(v)
	})
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *AppUserExtraUpsertBulk) UpdateIDNumber() *AppUserExtraUpsertBulk {
	return u.Update(func(s *AppUserExtraUpsert) {
		s.UpdateIDNumber()
	})
}

// Exec executes the query.
func (u *AppUserExtraUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppUserExtraCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserExtraCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserExtraUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
