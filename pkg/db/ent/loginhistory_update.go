// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/loginhistory"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// LoginHistoryUpdate is the builder for updating LoginHistory entities.
type LoginHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *LoginHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LoginHistoryUpdate builder.
func (lhu *LoginHistoryUpdate) Where(ps ...predicate.LoginHistory) *LoginHistoryUpdate {
	lhu.mutation.Where(ps...)
	return lhu
}

// SetCreatedAt sets the "created_at" field.
func (lhu *LoginHistoryUpdate) SetCreatedAt(u uint32) *LoginHistoryUpdate {
	lhu.mutation.ResetCreatedAt()
	lhu.mutation.SetCreatedAt(u)
	return lhu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableCreatedAt(u *uint32) *LoginHistoryUpdate {
	if u != nil {
		lhu.SetCreatedAt(*u)
	}
	return lhu
}

// AddCreatedAt adds u to the "created_at" field.
func (lhu *LoginHistoryUpdate) AddCreatedAt(u int32) *LoginHistoryUpdate {
	lhu.mutation.AddCreatedAt(u)
	return lhu
}

// SetUpdatedAt sets the "updated_at" field.
func (lhu *LoginHistoryUpdate) SetUpdatedAt(u uint32) *LoginHistoryUpdate {
	lhu.mutation.ResetUpdatedAt()
	lhu.mutation.SetUpdatedAt(u)
	return lhu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (lhu *LoginHistoryUpdate) AddUpdatedAt(u int32) *LoginHistoryUpdate {
	lhu.mutation.AddUpdatedAt(u)
	return lhu
}

// SetDeletedAt sets the "deleted_at" field.
func (lhu *LoginHistoryUpdate) SetDeletedAt(u uint32) *LoginHistoryUpdate {
	lhu.mutation.ResetDeletedAt()
	lhu.mutation.SetDeletedAt(u)
	return lhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableDeletedAt(u *uint32) *LoginHistoryUpdate {
	if u != nil {
		lhu.SetDeletedAt(*u)
	}
	return lhu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (lhu *LoginHistoryUpdate) AddDeletedAt(u int32) *LoginHistoryUpdate {
	lhu.mutation.AddDeletedAt(u)
	return lhu
}

// SetAppID sets the "app_id" field.
func (lhu *LoginHistoryUpdate) SetAppID(u uuid.UUID) *LoginHistoryUpdate {
	lhu.mutation.SetAppID(u)
	return lhu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableAppID(u *uuid.UUID) *LoginHistoryUpdate {
	if u != nil {
		lhu.SetAppID(*u)
	}
	return lhu
}

// ClearAppID clears the value of the "app_id" field.
func (lhu *LoginHistoryUpdate) ClearAppID() *LoginHistoryUpdate {
	lhu.mutation.ClearAppID()
	return lhu
}

// SetUserID sets the "user_id" field.
func (lhu *LoginHistoryUpdate) SetUserID(u uuid.UUID) *LoginHistoryUpdate {
	lhu.mutation.SetUserID(u)
	return lhu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableUserID(u *uuid.UUID) *LoginHistoryUpdate {
	if u != nil {
		lhu.SetUserID(*u)
	}
	return lhu
}

// ClearUserID clears the value of the "user_id" field.
func (lhu *LoginHistoryUpdate) ClearUserID() *LoginHistoryUpdate {
	lhu.mutation.ClearUserID()
	return lhu
}

// SetClientIP sets the "client_ip" field.
func (lhu *LoginHistoryUpdate) SetClientIP(s string) *LoginHistoryUpdate {
	lhu.mutation.SetClientIP(s)
	return lhu
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableClientIP(s *string) *LoginHistoryUpdate {
	if s != nil {
		lhu.SetClientIP(*s)
	}
	return lhu
}

// ClearClientIP clears the value of the "client_ip" field.
func (lhu *LoginHistoryUpdate) ClearClientIP() *LoginHistoryUpdate {
	lhu.mutation.ClearClientIP()
	return lhu
}

// SetUserAgent sets the "user_agent" field.
func (lhu *LoginHistoryUpdate) SetUserAgent(s string) *LoginHistoryUpdate {
	lhu.mutation.SetUserAgent(s)
	return lhu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableUserAgent(s *string) *LoginHistoryUpdate {
	if s != nil {
		lhu.SetUserAgent(*s)
	}
	return lhu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (lhu *LoginHistoryUpdate) ClearUserAgent() *LoginHistoryUpdate {
	lhu.mutation.ClearUserAgent()
	return lhu
}

// SetLocation sets the "location" field.
func (lhu *LoginHistoryUpdate) SetLocation(s string) *LoginHistoryUpdate {
	lhu.mutation.SetLocation(s)
	return lhu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableLocation(s *string) *LoginHistoryUpdate {
	if s != nil {
		lhu.SetLocation(*s)
	}
	return lhu
}

// ClearLocation clears the value of the "location" field.
func (lhu *LoginHistoryUpdate) ClearLocation() *LoginHistoryUpdate {
	lhu.mutation.ClearLocation()
	return lhu
}

// Mutation returns the LoginHistoryMutation object of the builder.
func (lhu *LoginHistoryUpdate) Mutation() *LoginHistoryMutation {
	return lhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lhu *LoginHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := lhu.defaults(); err != nil {
		return 0, err
	}
	if len(lhu.hooks) == 0 {
		affected, err = lhu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lhu.mutation = mutation
			affected, err = lhu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lhu.hooks) - 1; i >= 0; i-- {
			if lhu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lhu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lhu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lhu *LoginHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := lhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lhu *LoginHistoryUpdate) Exec(ctx context.Context) error {
	_, err := lhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhu *LoginHistoryUpdate) ExecX(ctx context.Context) {
	if err := lhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lhu *LoginHistoryUpdate) defaults() error {
	if _, ok := lhu.mutation.UpdatedAt(); !ok {
		if loginhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized loginhistory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := loginhistory.UpdateDefaultUpdatedAt()
		lhu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lhu *LoginHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LoginHistoryUpdate {
	lhu.modifiers = append(lhu.modifiers, modifiers...)
	return lhu
}

func (lhu *LoginHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginhistory.Table,
			Columns: loginhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: loginhistory.FieldID,
			},
		},
	}
	if ps := lhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lhu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreatedAt,
		})
	}
	if value, ok := lhu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreatedAt,
		})
	}
	if value, ok := lhu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldUpdatedAt,
		})
	}
	if value, ok := lhu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldUpdatedAt,
		})
	}
	if value, ok := lhu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldDeletedAt,
		})
	}
	if value, ok := lhu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldDeletedAt,
		})
	}
	if value, ok := lhu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldAppID,
		})
	}
	if lhu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: loginhistory.FieldAppID,
		})
	}
	if value, ok := lhu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldUserID,
		})
	}
	if lhu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: loginhistory.FieldUserID,
		})
	}
	if value, ok := lhu.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldClientIP,
		})
	}
	if lhu.mutation.ClientIPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loginhistory.FieldClientIP,
		})
	}
	if value, ok := lhu.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldUserAgent,
		})
	}
	if lhu.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loginhistory.FieldUserAgent,
		})
	}
	if value, ok := lhu.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldLocation,
		})
	}
	if lhu.mutation.LocationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loginhistory.FieldLocation,
		})
	}
	_spec.Modifiers = lhu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, lhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LoginHistoryUpdateOne is the builder for updating a single LoginHistory entity.
type LoginHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LoginHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (lhuo *LoginHistoryUpdateOne) SetCreatedAt(u uint32) *LoginHistoryUpdateOne {
	lhuo.mutation.ResetCreatedAt()
	lhuo.mutation.SetCreatedAt(u)
	return lhuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableCreatedAt(u *uint32) *LoginHistoryUpdateOne {
	if u != nil {
		lhuo.SetCreatedAt(*u)
	}
	return lhuo
}

// AddCreatedAt adds u to the "created_at" field.
func (lhuo *LoginHistoryUpdateOne) AddCreatedAt(u int32) *LoginHistoryUpdateOne {
	lhuo.mutation.AddCreatedAt(u)
	return lhuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lhuo *LoginHistoryUpdateOne) SetUpdatedAt(u uint32) *LoginHistoryUpdateOne {
	lhuo.mutation.ResetUpdatedAt()
	lhuo.mutation.SetUpdatedAt(u)
	return lhuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (lhuo *LoginHistoryUpdateOne) AddUpdatedAt(u int32) *LoginHistoryUpdateOne {
	lhuo.mutation.AddUpdatedAt(u)
	return lhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (lhuo *LoginHistoryUpdateOne) SetDeletedAt(u uint32) *LoginHistoryUpdateOne {
	lhuo.mutation.ResetDeletedAt()
	lhuo.mutation.SetDeletedAt(u)
	return lhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableDeletedAt(u *uint32) *LoginHistoryUpdateOne {
	if u != nil {
		lhuo.SetDeletedAt(*u)
	}
	return lhuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (lhuo *LoginHistoryUpdateOne) AddDeletedAt(u int32) *LoginHistoryUpdateOne {
	lhuo.mutation.AddDeletedAt(u)
	return lhuo
}

// SetAppID sets the "app_id" field.
func (lhuo *LoginHistoryUpdateOne) SetAppID(u uuid.UUID) *LoginHistoryUpdateOne {
	lhuo.mutation.SetAppID(u)
	return lhuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableAppID(u *uuid.UUID) *LoginHistoryUpdateOne {
	if u != nil {
		lhuo.SetAppID(*u)
	}
	return lhuo
}

// ClearAppID clears the value of the "app_id" field.
func (lhuo *LoginHistoryUpdateOne) ClearAppID() *LoginHistoryUpdateOne {
	lhuo.mutation.ClearAppID()
	return lhuo
}

// SetUserID sets the "user_id" field.
func (lhuo *LoginHistoryUpdateOne) SetUserID(u uuid.UUID) *LoginHistoryUpdateOne {
	lhuo.mutation.SetUserID(u)
	return lhuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableUserID(u *uuid.UUID) *LoginHistoryUpdateOne {
	if u != nil {
		lhuo.SetUserID(*u)
	}
	return lhuo
}

// ClearUserID clears the value of the "user_id" field.
func (lhuo *LoginHistoryUpdateOne) ClearUserID() *LoginHistoryUpdateOne {
	lhuo.mutation.ClearUserID()
	return lhuo
}

// SetClientIP sets the "client_ip" field.
func (lhuo *LoginHistoryUpdateOne) SetClientIP(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetClientIP(s)
	return lhuo
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableClientIP(s *string) *LoginHistoryUpdateOne {
	if s != nil {
		lhuo.SetClientIP(*s)
	}
	return lhuo
}

// ClearClientIP clears the value of the "client_ip" field.
func (lhuo *LoginHistoryUpdateOne) ClearClientIP() *LoginHistoryUpdateOne {
	lhuo.mutation.ClearClientIP()
	return lhuo
}

// SetUserAgent sets the "user_agent" field.
func (lhuo *LoginHistoryUpdateOne) SetUserAgent(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetUserAgent(s)
	return lhuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableUserAgent(s *string) *LoginHistoryUpdateOne {
	if s != nil {
		lhuo.SetUserAgent(*s)
	}
	return lhuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (lhuo *LoginHistoryUpdateOne) ClearUserAgent() *LoginHistoryUpdateOne {
	lhuo.mutation.ClearUserAgent()
	return lhuo
}

// SetLocation sets the "location" field.
func (lhuo *LoginHistoryUpdateOne) SetLocation(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetLocation(s)
	return lhuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableLocation(s *string) *LoginHistoryUpdateOne {
	if s != nil {
		lhuo.SetLocation(*s)
	}
	return lhuo
}

// ClearLocation clears the value of the "location" field.
func (lhuo *LoginHistoryUpdateOne) ClearLocation() *LoginHistoryUpdateOne {
	lhuo.mutation.ClearLocation()
	return lhuo
}

// Mutation returns the LoginHistoryMutation object of the builder.
func (lhuo *LoginHistoryUpdateOne) Mutation() *LoginHistoryMutation {
	return lhuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lhuo *LoginHistoryUpdateOne) Select(field string, fields ...string) *LoginHistoryUpdateOne {
	lhuo.fields = append([]string{field}, fields...)
	return lhuo
}

// Save executes the query and returns the updated LoginHistory entity.
func (lhuo *LoginHistoryUpdateOne) Save(ctx context.Context) (*LoginHistory, error) {
	var (
		err  error
		node *LoginHistory
	)
	if err := lhuo.defaults(); err != nil {
		return nil, err
	}
	if len(lhuo.hooks) == 0 {
		node, err = lhuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lhuo.mutation = mutation
			node, err = lhuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lhuo.hooks) - 1; i >= 0; i-- {
			if lhuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lhuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lhuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LoginHistory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LoginHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lhuo *LoginHistoryUpdateOne) SaveX(ctx context.Context) *LoginHistory {
	node, err := lhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lhuo *LoginHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := lhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhuo *LoginHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := lhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lhuo *LoginHistoryUpdateOne) defaults() error {
	if _, ok := lhuo.mutation.UpdatedAt(); !ok {
		if loginhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized loginhistory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := loginhistory.UpdateDefaultUpdatedAt()
		lhuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lhuo *LoginHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LoginHistoryUpdateOne {
	lhuo.modifiers = append(lhuo.modifiers, modifiers...)
	return lhuo
}

func (lhuo *LoginHistoryUpdateOne) sqlSave(ctx context.Context) (_node *LoginHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginhistory.Table,
			Columns: loginhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: loginhistory.FieldID,
			},
		},
	}
	id, ok := lhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginhistory.FieldID)
		for _, f := range fields {
			if !loginhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lhuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreatedAt,
		})
	}
	if value, ok := lhuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreatedAt,
		})
	}
	if value, ok := lhuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldUpdatedAt,
		})
	}
	if value, ok := lhuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldUpdatedAt,
		})
	}
	if value, ok := lhuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldDeletedAt,
		})
	}
	if value, ok := lhuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldDeletedAt,
		})
	}
	if value, ok := lhuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldAppID,
		})
	}
	if lhuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: loginhistory.FieldAppID,
		})
	}
	if value, ok := lhuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldUserID,
		})
	}
	if lhuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: loginhistory.FieldUserID,
		})
	}
	if value, ok := lhuo.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldClientIP,
		})
	}
	if lhuo.mutation.ClientIPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loginhistory.FieldClientIP,
		})
	}
	if value, ok := lhuo.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldUserAgent,
		})
	}
	if lhuo.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loginhistory.FieldUserAgent,
		})
	}
	if value, ok := lhuo.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldLocation,
		})
	}
	if lhuo.mutation.LocationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loginhistory.FieldLocation,
		})
	}
	_spec.Modifiers = lhuo.modifiers
	_node = &LoginHistory{config: lhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
