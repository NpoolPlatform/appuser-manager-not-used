// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/loginhistory"
	"github.com/google/uuid"
)

// LoginHistoryCreate is the builder for creating a LoginHistory entity.
type LoginHistoryCreate struct {
	config
	mutation *LoginHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lhc *LoginHistoryCreate) SetCreatedAt(u uint32) *LoginHistoryCreate {
	lhc.mutation.SetCreatedAt(u)
	return lhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableCreatedAt(u *uint32) *LoginHistoryCreate {
	if u != nil {
		lhc.SetCreatedAt(*u)
	}
	return lhc
}

// SetUpdatedAt sets the "updated_at" field.
func (lhc *LoginHistoryCreate) SetUpdatedAt(u uint32) *LoginHistoryCreate {
	lhc.mutation.SetUpdatedAt(u)
	return lhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableUpdatedAt(u *uint32) *LoginHistoryCreate {
	if u != nil {
		lhc.SetUpdatedAt(*u)
	}
	return lhc
}

// SetDeletedAt sets the "deleted_at" field.
func (lhc *LoginHistoryCreate) SetDeletedAt(u uint32) *LoginHistoryCreate {
	lhc.mutation.SetDeletedAt(u)
	return lhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableDeletedAt(u *uint32) *LoginHistoryCreate {
	if u != nil {
		lhc.SetDeletedAt(*u)
	}
	return lhc
}

// SetAppID sets the "app_id" field.
func (lhc *LoginHistoryCreate) SetAppID(u uuid.UUID) *LoginHistoryCreate {
	lhc.mutation.SetAppID(u)
	return lhc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableAppID(u *uuid.UUID) *LoginHistoryCreate {
	if u != nil {
		lhc.SetAppID(*u)
	}
	return lhc
}

// SetUserID sets the "user_id" field.
func (lhc *LoginHistoryCreate) SetUserID(u uuid.UUID) *LoginHistoryCreate {
	lhc.mutation.SetUserID(u)
	return lhc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableUserID(u *uuid.UUID) *LoginHistoryCreate {
	if u != nil {
		lhc.SetUserID(*u)
	}
	return lhc
}

// SetClientIP sets the "client_ip" field.
func (lhc *LoginHistoryCreate) SetClientIP(s string) *LoginHistoryCreate {
	lhc.mutation.SetClientIP(s)
	return lhc
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableClientIP(s *string) *LoginHistoryCreate {
	if s != nil {
		lhc.SetClientIP(*s)
	}
	return lhc
}

// SetUserAgent sets the "user_agent" field.
func (lhc *LoginHistoryCreate) SetUserAgent(s string) *LoginHistoryCreate {
	lhc.mutation.SetUserAgent(s)
	return lhc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableUserAgent(s *string) *LoginHistoryCreate {
	if s != nil {
		lhc.SetUserAgent(*s)
	}
	return lhc
}

// SetLocation sets the "location" field.
func (lhc *LoginHistoryCreate) SetLocation(s string) *LoginHistoryCreate {
	lhc.mutation.SetLocation(s)
	return lhc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableLocation(s *string) *LoginHistoryCreate {
	if s != nil {
		lhc.SetLocation(*s)
	}
	return lhc
}

// SetID sets the "id" field.
func (lhc *LoginHistoryCreate) SetID(u uuid.UUID) *LoginHistoryCreate {
	lhc.mutation.SetID(u)
	return lhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableID(u *uuid.UUID) *LoginHistoryCreate {
	if u != nil {
		lhc.SetID(*u)
	}
	return lhc
}

// Mutation returns the LoginHistoryMutation object of the builder.
func (lhc *LoginHistoryCreate) Mutation() *LoginHistoryMutation {
	return lhc.mutation
}

// Save creates the LoginHistory in the database.
func (lhc *LoginHistoryCreate) Save(ctx context.Context) (*LoginHistory, error) {
	var (
		err  error
		node *LoginHistory
	)
	if err := lhc.defaults(); err != nil {
		return nil, err
	}
	if len(lhc.hooks) == 0 {
		if err = lhc.check(); err != nil {
			return nil, err
		}
		node, err = lhc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lhc.check(); err != nil {
				return nil, err
			}
			lhc.mutation = mutation
			if node, err = lhc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lhc.hooks) - 1; i >= 0; i-- {
			if lhc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lhc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lhc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LoginHistory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LoginHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lhc *LoginHistoryCreate) SaveX(ctx context.Context) *LoginHistory {
	v, err := lhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lhc *LoginHistoryCreate) Exec(ctx context.Context) error {
	_, err := lhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhc *LoginHistoryCreate) ExecX(ctx context.Context) {
	if err := lhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lhc *LoginHistoryCreate) defaults() error {
	if _, ok := lhc.mutation.CreatedAt(); !ok {
		if loginhistory.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized loginhistory.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := loginhistory.DefaultCreatedAt()
		lhc.mutation.SetCreatedAt(v)
	}
	if _, ok := lhc.mutation.UpdatedAt(); !ok {
		if loginhistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized loginhistory.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := loginhistory.DefaultUpdatedAt()
		lhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lhc.mutation.DeletedAt(); !ok {
		if loginhistory.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized loginhistory.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := loginhistory.DefaultDeletedAt()
		lhc.mutation.SetDeletedAt(v)
	}
	if _, ok := lhc.mutation.AppID(); !ok {
		if loginhistory.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized loginhistory.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := loginhistory.DefaultAppID()
		lhc.mutation.SetAppID(v)
	}
	if _, ok := lhc.mutation.UserID(); !ok {
		if loginhistory.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized loginhistory.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := loginhistory.DefaultUserID()
		lhc.mutation.SetUserID(v)
	}
	if _, ok := lhc.mutation.ClientIP(); !ok {
		v := loginhistory.DefaultClientIP
		lhc.mutation.SetClientIP(v)
	}
	if _, ok := lhc.mutation.UserAgent(); !ok {
		v := loginhistory.DefaultUserAgent
		lhc.mutation.SetUserAgent(v)
	}
	if _, ok := lhc.mutation.Location(); !ok {
		v := loginhistory.DefaultLocation
		lhc.mutation.SetLocation(v)
	}
	if _, ok := lhc.mutation.ID(); !ok {
		if loginhistory.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized loginhistory.DefaultID (forgotten import ent/runtime?)")
		}
		v := loginhistory.DefaultID()
		lhc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lhc *LoginHistoryCreate) check() error {
	if _, ok := lhc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LoginHistory.created_at"`)}
	}
	if _, ok := lhc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LoginHistory.updated_at"`)}
	}
	if _, ok := lhc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "LoginHistory.deleted_at"`)}
	}
	return nil
}

func (lhc *LoginHistoryCreate) sqlSave(ctx context.Context) (*LoginHistory, error) {
	_node, _spec := lhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (lhc *LoginHistoryCreate) createSpec() (*LoginHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginHistory{config: lhc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: loginhistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: loginhistory.FieldID,
			},
		}
	)
	_spec.OnConflict = lhc.conflict
	if id, ok := lhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lhc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := lhc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := lhc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := lhc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := lhc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := lhc.mutation.ClientIP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldClientIP,
		})
		_node.ClientIP = value
	}
	if value, ok := lhc.mutation.UserAgent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldUserAgent,
		})
		_node.UserAgent = value
	}
	if value, ok := lhc.mutation.Location(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldLocation,
		})
		_node.Location = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lhc *LoginHistoryCreate) OnConflict(opts ...sql.ConflictOption) *LoginHistoryUpsertOne {
	lhc.conflict = opts
	return &LoginHistoryUpsertOne{
		create: lhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lhc *LoginHistoryCreate) OnConflictColumns(columns ...string) *LoginHistoryUpsertOne {
	lhc.conflict = append(lhc.conflict, sql.ConflictColumns(columns...))
	return &LoginHistoryUpsertOne{
		create: lhc,
	}
}

type (
	// LoginHistoryUpsertOne is the builder for "upsert"-ing
	//  one LoginHistory node.
	LoginHistoryUpsertOne struct {
		create *LoginHistoryCreate
	}

	// LoginHistoryUpsert is the "OnConflict" setter.
	LoginHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *LoginHistoryUpsert) SetCreatedAt(v uint32) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateCreatedAt() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LoginHistoryUpsert) AddCreatedAt(v uint32) *LoginHistoryUpsert {
	u.Add(loginhistory.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginHistoryUpsert) SetUpdatedAt(v uint32) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateUpdatedAt() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LoginHistoryUpsert) AddUpdatedAt(v uint32) *LoginHistoryUpsert {
	u.Add(loginhistory.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LoginHistoryUpsert) SetDeletedAt(v uint32) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateDeletedAt() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LoginHistoryUpsert) AddDeletedAt(v uint32) *LoginHistoryUpsert {
	u.Add(loginhistory.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *LoginHistoryUpsert) SetAppID(v uuid.UUID) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateAppID() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *LoginHistoryUpsert) ClearAppID() *LoginHistoryUpsert {
	u.SetNull(loginhistory.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *LoginHistoryUpsert) SetUserID(v uuid.UUID) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateUserID() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *LoginHistoryUpsert) ClearUserID() *LoginHistoryUpsert {
	u.SetNull(loginhistory.FieldUserID)
	return u
}

// SetClientIP sets the "client_ip" field.
func (u *LoginHistoryUpsert) SetClientIP(v string) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldClientIP, v)
	return u
}

// UpdateClientIP sets the "client_ip" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateClientIP() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldClientIP)
	return u
}

// ClearClientIP clears the value of the "client_ip" field.
func (u *LoginHistoryUpsert) ClearClientIP() *LoginHistoryUpsert {
	u.SetNull(loginhistory.FieldClientIP)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *LoginHistoryUpsert) SetUserAgent(v string) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateUserAgent() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *LoginHistoryUpsert) ClearUserAgent() *LoginHistoryUpsert {
	u.SetNull(loginhistory.FieldUserAgent)
	return u
}

// SetLocation sets the "location" field.
func (u *LoginHistoryUpsert) SetLocation(v string) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateLocation() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *LoginHistoryUpsert) ClearLocation() *LoginHistoryUpsert {
	u.SetNull(loginhistory.FieldLocation)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(loginhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LoginHistoryUpsertOne) UpdateNewValues() *LoginHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(loginhistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.LoginHistory.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LoginHistoryUpsertOne) Ignore() *LoginHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginHistoryUpsertOne) DoNothing() *LoginHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginHistoryCreate.OnConflict
// documentation for more info.
func (u *LoginHistoryUpsertOne) Update(set func(*LoginHistoryUpsert)) *LoginHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LoginHistoryUpsertOne) SetCreatedAt(v uint32) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LoginHistoryUpsertOne) AddCreatedAt(v uint32) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateCreatedAt() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginHistoryUpsertOne) SetUpdatedAt(v uint32) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LoginHistoryUpsertOne) AddUpdatedAt(v uint32) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateUpdatedAt() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LoginHistoryUpsertOne) SetDeletedAt(v uint32) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LoginHistoryUpsertOne) AddDeletedAt(v uint32) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateDeletedAt() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *LoginHistoryUpsertOne) SetAppID(v uuid.UUID) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateAppID() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *LoginHistoryUpsertOne) ClearAppID() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *LoginHistoryUpsertOne) SetUserID(v uuid.UUID) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateUserID() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *LoginHistoryUpsertOne) ClearUserID() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearUserID()
	})
}

// SetClientIP sets the "client_ip" field.
func (u *LoginHistoryUpsertOne) SetClientIP(v string) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetClientIP(v)
	})
}

// UpdateClientIP sets the "client_ip" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateClientIP() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateClientIP()
	})
}

// ClearClientIP clears the value of the "client_ip" field.
func (u *LoginHistoryUpsertOne) ClearClientIP() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearClientIP()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *LoginHistoryUpsertOne) SetUserAgent(v string) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateUserAgent() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *LoginHistoryUpsertOne) ClearUserAgent() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearUserAgent()
	})
}

// SetLocation sets the "location" field.
func (u *LoginHistoryUpsertOne) SetLocation(v string) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateLocation() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *LoginHistoryUpsertOne) ClearLocation() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearLocation()
	})
}

// Exec executes the query.
func (u *LoginHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LoginHistoryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LoginHistoryUpsertOne.ID is not supported by MySQL driver. Use LoginHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LoginHistoryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LoginHistoryCreateBulk is the builder for creating many LoginHistory entities in bulk.
type LoginHistoryCreateBulk struct {
	config
	builders []*LoginHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the LoginHistory entities in the database.
func (lhcb *LoginHistoryCreateBulk) Save(ctx context.Context) ([]*LoginHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lhcb.builders))
	nodes := make([]*LoginHistory, len(lhcb.builders))
	mutators := make([]Mutator, len(lhcb.builders))
	for i := range lhcb.builders {
		func(i int, root context.Context) {
			builder := lhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lhcb *LoginHistoryCreateBulk) SaveX(ctx context.Context) []*LoginHistory {
	v, err := lhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lhcb *LoginHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := lhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhcb *LoginHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := lhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lhcb *LoginHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *LoginHistoryUpsertBulk {
	lhcb.conflict = opts
	return &LoginHistoryUpsertBulk{
		create: lhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lhcb *LoginHistoryCreateBulk) OnConflictColumns(columns ...string) *LoginHistoryUpsertBulk {
	lhcb.conflict = append(lhcb.conflict, sql.ConflictColumns(columns...))
	return &LoginHistoryUpsertBulk{
		create: lhcb,
	}
}

// LoginHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of LoginHistory nodes.
type LoginHistoryUpsertBulk struct {
	create *LoginHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(loginhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LoginHistoryUpsertBulk) UpdateNewValues() *LoginHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(loginhistory.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LoginHistoryUpsertBulk) Ignore() *LoginHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginHistoryUpsertBulk) DoNothing() *LoginHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *LoginHistoryUpsertBulk) Update(set func(*LoginHistoryUpsert)) *LoginHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LoginHistoryUpsertBulk) SetCreatedAt(v uint32) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LoginHistoryUpsertBulk) AddCreatedAt(v uint32) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateCreatedAt() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginHistoryUpsertBulk) SetUpdatedAt(v uint32) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LoginHistoryUpsertBulk) AddUpdatedAt(v uint32) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateUpdatedAt() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LoginHistoryUpsertBulk) SetDeletedAt(v uint32) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LoginHistoryUpsertBulk) AddDeletedAt(v uint32) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateDeletedAt() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *LoginHistoryUpsertBulk) SetAppID(v uuid.UUID) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateAppID() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *LoginHistoryUpsertBulk) ClearAppID() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *LoginHistoryUpsertBulk) SetUserID(v uuid.UUID) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateUserID() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *LoginHistoryUpsertBulk) ClearUserID() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearUserID()
	})
}

// SetClientIP sets the "client_ip" field.
func (u *LoginHistoryUpsertBulk) SetClientIP(v string) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetClientIP(v)
	})
}

// UpdateClientIP sets the "client_ip" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateClientIP() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateClientIP()
	})
}

// ClearClientIP clears the value of the "client_ip" field.
func (u *LoginHistoryUpsertBulk) ClearClientIP() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearClientIP()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *LoginHistoryUpsertBulk) SetUserAgent(v string) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateUserAgent() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *LoginHistoryUpsertBulk) ClearUserAgent() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearUserAgent()
	})
}

// SetLocation sets the "location" field.
func (u *LoginHistoryUpsertBulk) SetLocation(v string) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateLocation() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *LoginHistoryUpsertBulk) ClearLocation() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearLocation()
	})
}

// Exec executes the query.
func (u *LoginHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LoginHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
