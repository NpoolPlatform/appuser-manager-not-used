// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approleuser"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppRoleUserUpdate is the builder for updating AppRoleUser entities.
type AppRoleUserUpdate struct {
	config
	hooks     []Hook
	mutation  *AppRoleUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppRoleUserUpdate builder.
func (aruu *AppRoleUserUpdate) Where(ps ...predicate.AppRoleUser) *AppRoleUserUpdate {
	aruu.mutation.Where(ps...)
	return aruu
}

// SetCreatedAt sets the "created_at" field.
func (aruu *AppRoleUserUpdate) SetCreatedAt(u uint32) *AppRoleUserUpdate {
	aruu.mutation.ResetCreatedAt()
	aruu.mutation.SetCreatedAt(u)
	return aruu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aruu *AppRoleUserUpdate) SetNillableCreatedAt(u *uint32) *AppRoleUserUpdate {
	if u != nil {
		aruu.SetCreatedAt(*u)
	}
	return aruu
}

// AddCreatedAt adds u to the "created_at" field.
func (aruu *AppRoleUserUpdate) AddCreatedAt(u int32) *AppRoleUserUpdate {
	aruu.mutation.AddCreatedAt(u)
	return aruu
}

// SetUpdatedAt sets the "updated_at" field.
func (aruu *AppRoleUserUpdate) SetUpdatedAt(u uint32) *AppRoleUserUpdate {
	aruu.mutation.ResetUpdatedAt()
	aruu.mutation.SetUpdatedAt(u)
	return aruu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aruu *AppRoleUserUpdate) AddUpdatedAt(u int32) *AppRoleUserUpdate {
	aruu.mutation.AddUpdatedAt(u)
	return aruu
}

// SetDeletedAt sets the "deleted_at" field.
func (aruu *AppRoleUserUpdate) SetDeletedAt(u uint32) *AppRoleUserUpdate {
	aruu.mutation.ResetDeletedAt()
	aruu.mutation.SetDeletedAt(u)
	return aruu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aruu *AppRoleUserUpdate) SetNillableDeletedAt(u *uint32) *AppRoleUserUpdate {
	if u != nil {
		aruu.SetDeletedAt(*u)
	}
	return aruu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aruu *AppRoleUserUpdate) AddDeletedAt(u int32) *AppRoleUserUpdate {
	aruu.mutation.AddDeletedAt(u)
	return aruu
}

// SetAppID sets the "app_id" field.
func (aruu *AppRoleUserUpdate) SetAppID(u uuid.UUID) *AppRoleUserUpdate {
	aruu.mutation.SetAppID(u)
	return aruu
}

// SetRoleID sets the "role_id" field.
func (aruu *AppRoleUserUpdate) SetRoleID(u uuid.UUID) *AppRoleUserUpdate {
	aruu.mutation.SetRoleID(u)
	return aruu
}

// SetUserID sets the "user_id" field.
func (aruu *AppRoleUserUpdate) SetUserID(u uuid.UUID) *AppRoleUserUpdate {
	aruu.mutation.SetUserID(u)
	return aruu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aruu *AppRoleUserUpdate) SetNillableUserID(u *uuid.UUID) *AppRoleUserUpdate {
	if u != nil {
		aruu.SetUserID(*u)
	}
	return aruu
}

// ClearUserID clears the value of the "user_id" field.
func (aruu *AppRoleUserUpdate) ClearUserID() *AppRoleUserUpdate {
	aruu.mutation.ClearUserID()
	return aruu
}

// Mutation returns the AppRoleUserMutation object of the builder.
func (aruu *AppRoleUserUpdate) Mutation() *AppRoleUserMutation {
	return aruu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aruu *AppRoleUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := aruu.defaults(); err != nil {
		return 0, err
	}
	if len(aruu.hooks) == 0 {
		affected, err = aruu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruu.mutation = mutation
			affected, err = aruu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aruu.hooks) - 1; i >= 0; i-- {
			if aruu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruu *AppRoleUserUpdate) SaveX(ctx context.Context) int {
	affected, err := aruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aruu *AppRoleUserUpdate) Exec(ctx context.Context) error {
	_, err := aruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruu *AppRoleUserUpdate) ExecX(ctx context.Context) {
	if err := aruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruu *AppRoleUserUpdate) defaults() error {
	if _, ok := aruu.mutation.UpdatedAt(); !ok {
		if approleuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized approleuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := approleuser.UpdateDefaultUpdatedAt()
		aruu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aruu *AppRoleUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppRoleUserUpdate {
	aruu.modifiers = append(aruu.modifiers, modifiers...)
	return aruu
}

func (aruu *AppRoleUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approleuser.Table,
			Columns: approleuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approleuser.FieldID,
			},
		},
	}
	if ps := aruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldCreatedAt,
		})
	}
	if value, ok := aruu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldCreatedAt,
		})
	}
	if value, ok := aruu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldUpdatedAt,
		})
	}
	if value, ok := aruu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldUpdatedAt,
		})
	}
	if value, ok := aruu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldDeletedAt,
		})
	}
	if value, ok := aruu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldDeletedAt,
		})
	}
	if value, ok := aruu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldAppID,
		})
	}
	if value, ok := aruu.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldRoleID,
		})
	}
	if value, ok := aruu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldUserID,
		})
	}
	if aruu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: approleuser.FieldUserID,
		})
	}
	_spec.Modifiers = aruu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, aruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approleuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppRoleUserUpdateOne is the builder for updating a single AppRoleUser entity.
type AppRoleUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppRoleUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (aruuo *AppRoleUserUpdateOne) SetCreatedAt(u uint32) *AppRoleUserUpdateOne {
	aruuo.mutation.ResetCreatedAt()
	aruuo.mutation.SetCreatedAt(u)
	return aruuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aruuo *AppRoleUserUpdateOne) SetNillableCreatedAt(u *uint32) *AppRoleUserUpdateOne {
	if u != nil {
		aruuo.SetCreatedAt(*u)
	}
	return aruuo
}

// AddCreatedAt adds u to the "created_at" field.
func (aruuo *AppRoleUserUpdateOne) AddCreatedAt(u int32) *AppRoleUserUpdateOne {
	aruuo.mutation.AddCreatedAt(u)
	return aruuo
}

// SetUpdatedAt sets the "updated_at" field.
func (aruuo *AppRoleUserUpdateOne) SetUpdatedAt(u uint32) *AppRoleUserUpdateOne {
	aruuo.mutation.ResetUpdatedAt()
	aruuo.mutation.SetUpdatedAt(u)
	return aruuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aruuo *AppRoleUserUpdateOne) AddUpdatedAt(u int32) *AppRoleUserUpdateOne {
	aruuo.mutation.AddUpdatedAt(u)
	return aruuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aruuo *AppRoleUserUpdateOne) SetDeletedAt(u uint32) *AppRoleUserUpdateOne {
	aruuo.mutation.ResetDeletedAt()
	aruuo.mutation.SetDeletedAt(u)
	return aruuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aruuo *AppRoleUserUpdateOne) SetNillableDeletedAt(u *uint32) *AppRoleUserUpdateOne {
	if u != nil {
		aruuo.SetDeletedAt(*u)
	}
	return aruuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aruuo *AppRoleUserUpdateOne) AddDeletedAt(u int32) *AppRoleUserUpdateOne {
	aruuo.mutation.AddDeletedAt(u)
	return aruuo
}

// SetAppID sets the "app_id" field.
func (aruuo *AppRoleUserUpdateOne) SetAppID(u uuid.UUID) *AppRoleUserUpdateOne {
	aruuo.mutation.SetAppID(u)
	return aruuo
}

// SetRoleID sets the "role_id" field.
func (aruuo *AppRoleUserUpdateOne) SetRoleID(u uuid.UUID) *AppRoleUserUpdateOne {
	aruuo.mutation.SetRoleID(u)
	return aruuo
}

// SetUserID sets the "user_id" field.
func (aruuo *AppRoleUserUpdateOne) SetUserID(u uuid.UUID) *AppRoleUserUpdateOne {
	aruuo.mutation.SetUserID(u)
	return aruuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aruuo *AppRoleUserUpdateOne) SetNillableUserID(u *uuid.UUID) *AppRoleUserUpdateOne {
	if u != nil {
		aruuo.SetUserID(*u)
	}
	return aruuo
}

// ClearUserID clears the value of the "user_id" field.
func (aruuo *AppRoleUserUpdateOne) ClearUserID() *AppRoleUserUpdateOne {
	aruuo.mutation.ClearUserID()
	return aruuo
}

// Mutation returns the AppRoleUserMutation object of the builder.
func (aruuo *AppRoleUserUpdateOne) Mutation() *AppRoleUserMutation {
	return aruuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruuo *AppRoleUserUpdateOne) Select(field string, fields ...string) *AppRoleUserUpdateOne {
	aruuo.fields = append([]string{field}, fields...)
	return aruuo
}

// Save executes the query and returns the updated AppRoleUser entity.
func (aruuo *AppRoleUserUpdateOne) Save(ctx context.Context) (*AppRoleUser, error) {
	var (
		err  error
		node *AppRoleUser
	)
	if err := aruuo.defaults(); err != nil {
		return nil, err
	}
	if len(aruuo.hooks) == 0 {
		node, err = aruuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruuo.mutation = mutation
			node, err = aruuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruuo.hooks) - 1; i >= 0; i-- {
			if aruuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aruuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppRoleUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppRoleUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruuo *AppRoleUserUpdateOne) SaveX(ctx context.Context) *AppRoleUser {
	node, err := aruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruuo *AppRoleUserUpdateOne) Exec(ctx context.Context) error {
	_, err := aruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruuo *AppRoleUserUpdateOne) ExecX(ctx context.Context) {
	if err := aruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruuo *AppRoleUserUpdateOne) defaults() error {
	if _, ok := aruuo.mutation.UpdatedAt(); !ok {
		if approleuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized approleuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := approleuser.UpdateDefaultUpdatedAt()
		aruuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aruuo *AppRoleUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppRoleUserUpdateOne {
	aruuo.modifiers = append(aruuo.modifiers, modifiers...)
	return aruuo
}

func (aruuo *AppRoleUserUpdateOne) sqlSave(ctx context.Context) (_node *AppRoleUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approleuser.Table,
			Columns: approleuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approleuser.FieldID,
			},
		},
	}
	id, ok := aruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppRoleUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approleuser.FieldID)
		for _, f := range fields {
			if !approleuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approleuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldCreatedAt,
		})
	}
	if value, ok := aruuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldCreatedAt,
		})
	}
	if value, ok := aruuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldUpdatedAt,
		})
	}
	if value, ok := aruuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldUpdatedAt,
		})
	}
	if value, ok := aruuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldDeletedAt,
		})
	}
	if value, ok := aruuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldDeletedAt,
		})
	}
	if value, ok := aruuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldAppID,
		})
	}
	if value, ok := aruuo.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldRoleID,
		})
	}
	if value, ok := aruuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldUserID,
		})
	}
	if aruuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: approleuser.FieldUserID,
		})
	}
	_spec.Modifiers = aruuo.modifiers
	_node = &AppRoleUser{config: aruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approleuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
