// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/banappuser"
	"github.com/google/uuid"
)

// BanAppUser is the model entity for the BanAppUser schema.
type BanAppUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BanAppUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case banappuser.FieldCreatedAt, banappuser.FieldUpdatedAt, banappuser.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case banappuser.FieldMessage:
			values[i] = new(sql.NullString)
		case banappuser.FieldID, banappuser.FieldAppID, banappuser.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BanAppUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BanAppUser fields.
func (bau *BanAppUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case banappuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bau.ID = *value
			}
		case banappuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bau.CreatedAt = uint32(value.Int64)
			}
		case banappuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bau.UpdatedAt = uint32(value.Int64)
			}
		case banappuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bau.DeletedAt = uint32(value.Int64)
			}
		case banappuser.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				bau.AppID = *value
			}
		case banappuser.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				bau.UserID = *value
			}
		case banappuser.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				bau.Message = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BanAppUser.
// Note that you need to call BanAppUser.Unwrap() before calling this method if this BanAppUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (bau *BanAppUser) Update() *BanAppUserUpdateOne {
	return (&BanAppUserClient{config: bau.config}).UpdateOne(bau)
}

// Unwrap unwraps the BanAppUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bau *BanAppUser) Unwrap() *BanAppUser {
	tx, ok := bau.config.driver.(*txDriver)
	if !ok {
		panic("ent: BanAppUser is not a transactional entity")
	}
	bau.config.driver = tx.drv
	return bau
}

// String implements the fmt.Stringer.
func (bau *BanAppUser) String() string {
	var builder strings.Builder
	builder.WriteString("BanAppUser(")
	builder.WriteString(fmt.Sprintf("id=%v", bau.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", bau.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", bau.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", bau.DeletedAt))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", bau.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", bau.UserID))
	builder.WriteString(", message=")
	builder.WriteString(bau.Message)
	builder.WriteByte(')')
	return builder.String()
}

// BanAppUsers is a parsable slice of BanAppUser.
type BanAppUsers []*BanAppUser

func (bau BanAppUsers) config(cfg config) {
	for _i := range bau {
		bau[_i].config = cfg
	}
}
