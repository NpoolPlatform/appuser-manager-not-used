// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approleuser"
	"github.com/google/uuid"
)

// AppRoleUser is the model entity for the AppRoleUser schema.
type AppRoleUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID uuid.UUID `json:"role_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppRoleUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case approleuser.FieldCreatedAt, approleuser.FieldUpdatedAt, approleuser.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case approleuser.FieldID, approleuser.FieldAppID, approleuser.FieldRoleID, approleuser.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppRoleUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppRoleUser fields.
func (aru *AppRoleUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approleuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aru.ID = *value
			}
		case approleuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aru.CreatedAt = uint32(value.Int64)
			}
		case approleuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aru.UpdatedAt = uint32(value.Int64)
			}
		case approleuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				aru.DeletedAt = uint32(value.Int64)
			}
		case approleuser.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				aru.AppID = *value
			}
		case approleuser.FieldRoleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value != nil {
				aru.RoleID = *value
			}
		case approleuser.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				aru.UserID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppRoleUser.
// Note that you need to call AppRoleUser.Unwrap() before calling this method if this AppRoleUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (aru *AppRoleUser) Update() *AppRoleUserUpdateOne {
	return (&AppRoleUserClient{config: aru.config}).UpdateOne(aru)
}

// Unwrap unwraps the AppRoleUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aru *AppRoleUser) Unwrap() *AppRoleUser {
	tx, ok := aru.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppRoleUser is not a transactional entity")
	}
	aru.config.driver = tx.drv
	return aru
}

// String implements the fmt.Stringer.
func (aru *AppRoleUser) String() string {
	var builder strings.Builder
	builder.WriteString("AppRoleUser(")
	builder.WriteString(fmt.Sprintf("id=%v", aru.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", aru.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", aru.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", aru.DeletedAt))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", aru.AppID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", aru.RoleID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", aru.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// AppRoleUsers is a parsable slice of AppRoleUser.
type AppRoleUsers []*AppRoleUser

func (aru AppRoleUsers) config(cfg config) {
	for _i := range aru {
		aru[_i].config = cfg
	}
}
